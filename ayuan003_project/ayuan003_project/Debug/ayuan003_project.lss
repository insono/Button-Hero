
ayuan003_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027c  00800100  000015ec  00001680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  0080037c  0080037c  000018fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000018fc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  0000192c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b74  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000566  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001143  00000000  00000000  00003b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000428  00000000  00000000  00004ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ae  00000000  00000000  000050f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000107e  00000000  00000000  000057a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00006820  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d1 c0       	rjmp	.+418    	; 0x1d8 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ee       	ldi	r30, 0xEC	; 236
      a0:	f5 e1       	ldi	r31, 0x15	; 21
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 37       	cpi	r26, 0x7C	; 124
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	ac e7       	ldi	r26, 0x7C	; 124
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3b       	cpi	r26, 0xB9	; 185
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	89 d7       	rcall	.+3858   	; 0xfd6 <main>
      c4:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <clockLow>:
	set_PWM(0);
}

void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
      ca:	5d 98       	cbi	0x0b, 5	; 11
      cc:	08 95       	ret

000000ce <clockHigh>:
      ce:	5d 9a       	sbi	0x0b, 5	; 11
      d0:	08 95       	ret

000000d2 <clock>:
      d2:	fd df       	rcall	.-6      	; 0xce <clockHigh>
      d4:	fa cf       	rjmp	.-12     	; 0xca <clockLow>
      d6:	08 95       	ret

000000d8 <latchLow>:
      d8:	5c 98       	cbi	0x0b, 4	; 11
      da:	08 95       	ret

000000dc <latchHigh>:
      dc:	5c 9a       	sbi	0x0b, 4	; 11
      de:	08 95       	ret

000000e0 <latch>:
      e0:	fd df       	rcall	.-6      	; 0xdc <latchHigh>
      e2:	fa cf       	rjmp	.-12     	; 0xd8 <latchLow>
      e4:	08 95       	ret

000000e6 <dataLow>:
      e6:	5b 98       	cbi	0x0b, 3	; 11
      e8:	08 95       	ret

000000ea <dataHigh>:
      ea:	5b 9a       	sbi	0x0b, 3	; 11
      ec:	08 95       	ret

000000ee <rows>:
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	c0 e0       	ldi	r28, 0x00	; 0
      f8:	d0 e0       	ldi	r29, 0x00	; 0
      fa:	08 2f       	mov	r16, r24
      fc:	10 e0       	ldi	r17, 0x00	; 0
      fe:	98 01       	movw	r18, r16
     100:	0c 2e       	mov	r0, r28
     102:	02 c0       	rjmp	.+4      	; 0x108 <rows+0x1a>
     104:	22 0f       	add	r18, r18
     106:	33 1f       	adc	r19, r19
     108:	0a 94       	dec	r0
     10a:	e2 f7       	brpl	.-8      	; 0x104 <rows+0x16>
     10c:	27 ff       	sbrs	r18, 7
     10e:	02 c0       	rjmp	.+4      	; 0x114 <rows+0x26>
     110:	ec df       	rcall	.-40     	; 0xea <dataHigh>
     112:	01 c0       	rjmp	.+2      	; 0x116 <rows+0x28>
     114:	e8 df       	rcall	.-48     	; 0xe6 <dataLow>
     116:	dd df       	rcall	.-70     	; 0xd2 <clock>
     118:	21 96       	adiw	r28, 0x01	; 1
     11a:	c8 30       	cpi	r28, 0x08	; 8
     11c:	d1 05       	cpc	r29, r1
     11e:	79 f7       	brne	.-34     	; 0xfe <rows+0x10>
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	1f 91       	pop	r17
     126:	0f 91       	pop	r16
     128:	08 95       	ret

0000012a <columns>:
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	c0 e0       	ldi	r28, 0x00	; 0
     134:	d0 e0       	ldi	r29, 0x00	; 0
     136:	08 2f       	mov	r16, r24
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	98 01       	movw	r18, r16
     13c:	0c 2e       	mov	r0, r28
     13e:	02 c0       	rjmp	.+4      	; 0x144 <columns+0x1a>
     140:	35 95       	asr	r19
     142:	27 95       	ror	r18
     144:	0a 94       	dec	r0
     146:	e2 f7       	brpl	.-8      	; 0x140 <columns+0x16>
     148:	20 ff       	sbrs	r18, 0
     14a:	02 c0       	rjmp	.+4      	; 0x150 <columns+0x26>
     14c:	ce df       	rcall	.-100    	; 0xea <dataHigh>
     14e:	01 c0       	rjmp	.+2      	; 0x152 <columns+0x28>
     150:	ca df       	rcall	.-108    	; 0xe6 <dataLow>
     152:	bf df       	rcall	.-130    	; 0xd2 <clock>
     154:	21 96       	adiw	r28, 0x01	; 1
     156:	c8 30       	cpi	r28, 0x08	; 8
     158:	d1 05       	cpc	r29, r1
     15a:	79 f7       	brne	.-34     	; 0x13a <columns+0x10>
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <RGBmatrix>:
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	c6 2f       	mov	r28, r22
     16e:	14 2f       	mov	r17, r20
     170:	d2 2f       	mov	r29, r18
     172:	db df       	rcall	.-74     	; 0x12a <columns>
     174:	81 2f       	mov	r24, r17
     176:	80 95       	com	r24
     178:	ba df       	rcall	.-140    	; 0xee <rows>
     17a:	8d 2f       	mov	r24, r29
     17c:	80 95       	com	r24
     17e:	b7 df       	rcall	.-146    	; 0xee <rows>
     180:	8c 2f       	mov	r24, r28
     182:	80 95       	com	r24
     184:	b4 df       	rcall	.-152    	; 0xee <rows>
     186:	ac df       	rcall	.-168    	; 0xe0 <latch>
     188:	df 91       	pop	r29
     18a:	cf 91       	pop	r28
     18c:	1f 91       	pop	r17
     18e:	08 95       	ret

00000190 <TimerOn>:
     190:	8b e0       	ldi	r24, 0x0B	; 11
     192:	80 93 81 00 	sts	0x0081, r24
     196:	8d e7       	ldi	r24, 0x7D	; 125
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	90 93 89 00 	sts	0x0089, r25
     19e:	80 93 88 00 	sts	0x0088, r24
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	80 93 6f 00 	sts	0x006F, r24
     1a8:	10 92 85 00 	sts	0x0085, r1
     1ac:	10 92 84 00 	sts	0x0084, r1
     1b0:	80 91 30 03 	lds	r24, 0x0330
     1b4:	90 91 31 03 	lds	r25, 0x0331
     1b8:	a0 91 32 03 	lds	r26, 0x0332
     1bc:	b0 91 33 03 	lds	r27, 0x0333
     1c0:	80 93 b0 03 	sts	0x03B0, r24
     1c4:	90 93 b1 03 	sts	0x03B1, r25
     1c8:	a0 93 b2 03 	sts	0x03B2, r26
     1cc:	b0 93 b3 03 	sts	0x03B3, r27
     1d0:	8f b7       	in	r24, 0x3f	; 63
     1d2:	80 68       	ori	r24, 0x80	; 128
     1d4:	8f bf       	out	0x3f, r24	; 63
     1d6:	08 95       	ret

000001d8 <__vector_13>:
     1d8:	1f 92       	push	r1
     1da:	0f 92       	push	r0
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	0f 92       	push	r0
     1e0:	11 24       	eor	r1, r1
     1e2:	8f 93       	push	r24
     1e4:	9f 93       	push	r25
     1e6:	af 93       	push	r26
     1e8:	bf 93       	push	r27
     1ea:	80 91 b0 03 	lds	r24, 0x03B0
     1ee:	90 91 b1 03 	lds	r25, 0x03B1
     1f2:	a0 91 b2 03 	lds	r26, 0x03B2
     1f6:	b0 91 b3 03 	lds	r27, 0x03B3
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	a1 09       	sbc	r26, r1
     1fe:	b1 09       	sbc	r27, r1
     200:	80 93 b0 03 	sts	0x03B0, r24
     204:	90 93 b1 03 	sts	0x03B1, r25
     208:	a0 93 b2 03 	sts	0x03B2, r26
     20c:	b0 93 b3 03 	sts	0x03B3, r27
     210:	89 2b       	or	r24, r25
     212:	8a 2b       	or	r24, r26
     214:	8b 2b       	or	r24, r27
     216:	99 f4       	brne	.+38     	; 0x23e <__vector_13+0x66>
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 93 b4 03 	sts	0x03B4, r24
     21e:	80 91 30 03 	lds	r24, 0x0330
     222:	90 91 31 03 	lds	r25, 0x0331
     226:	a0 91 32 03 	lds	r26, 0x0332
     22a:	b0 91 33 03 	lds	r27, 0x0333
     22e:	80 93 b0 03 	sts	0x03B0, r24
     232:	90 93 b1 03 	sts	0x03B1, r25
     236:	a0 93 b2 03 	sts	0x03B2, r26
     23a:	b0 93 b3 03 	sts	0x03B3, r27
     23e:	bf 91       	pop	r27
     240:	af 91       	pop	r26
     242:	9f 91       	pop	r25
     244:	8f 91       	pop	r24
     246:	0f 90       	pop	r0
     248:	0f be       	out	0x3f, r0	; 63
     24a:	0f 90       	pop	r0
     24c:	1f 90       	pop	r1
     24e:	18 95       	reti

00000250 <set_PWM>:
     250:	cf 92       	push	r12
     252:	df 92       	push	r13
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	6b 01       	movw	r12, r22
     25a:	7c 01       	movw	r14, r24
     25c:	20 91 9d 03 	lds	r18, 0x039D
     260:	30 91 9e 03 	lds	r19, 0x039E
     264:	40 91 9f 03 	lds	r20, 0x039F
     268:	50 91 a0 03 	lds	r21, 0x03A0
     26c:	0e 94 41 09 	call	0x1282	; 0x1282 <__cmpsf2>
     270:	88 23       	and	r24, r24
     272:	09 f4       	brne	.+2      	; 0x276 <set_PWM+0x26>
     274:	56 c0       	rjmp	.+172    	; 0x322 <set_PWM+0xd2>
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	a9 01       	movw	r20, r18
     27c:	c7 01       	movw	r24, r14
     27e:	b6 01       	movw	r22, r12
     280:	0e 94 41 09 	call	0x1282	; 0x1282 <__cmpsf2>
     284:	81 11       	cpse	r24, r1
     286:	06 c0       	rjmp	.+12     	; 0x294 <set_PWM+0x44>
     288:	e1 e9       	ldi	r30, 0x91	; 145
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	88 70       	andi	r24, 0x08	; 8
     290:	80 83       	st	Z, r24
     292:	05 c0       	rjmp	.+10     	; 0x29e <set_PWM+0x4e>
     294:	e1 e9       	ldi	r30, 0x91	; 145
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	83 60       	ori	r24, 0x03	; 3
     29c:	80 83       	st	Z, r24
     29e:	28 e5       	ldi	r18, 0x58	; 88
     2a0:	39 e3       	ldi	r19, 0x39	; 57
     2a2:	44 e7       	ldi	r20, 0x74	; 116
     2a4:	5f e3       	ldi	r21, 0x3F	; 63
     2a6:	c7 01       	movw	r24, r14
     2a8:	b6 01       	movw	r22, r12
     2aa:	eb d7       	rcall	.+4054   	; 0x1282 <__cmpsf2>
     2ac:	88 23       	and	r24, r24
     2ae:	3c f4       	brge	.+14     	; 0x2be <set_PWM+0x6e>
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
     2b2:	9f ef       	ldi	r25, 0xFF	; 255
     2b4:	90 93 99 00 	sts	0x0099, r25
     2b8:	80 93 98 00 	sts	0x0098, r24
     2bc:	26 c0       	rjmp	.+76     	; 0x30a <set_PWM+0xba>
     2be:	20 e0       	ldi	r18, 0x00	; 0
     2c0:	34 e2       	ldi	r19, 0x24	; 36
     2c2:	44 ef       	ldi	r20, 0xF4	; 244
     2c4:	56 e4       	ldi	r21, 0x46	; 70
     2c6:	c7 01       	movw	r24, r14
     2c8:	b6 01       	movw	r22, r12
     2ca:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__gesf2>
     2ce:	18 16       	cp	r1, r24
     2d0:	2c f4       	brge	.+10     	; 0x2dc <set_PWM+0x8c>
     2d2:	10 92 99 00 	sts	0x0099, r1
     2d6:	10 92 98 00 	sts	0x0098, r1
     2da:	17 c0       	rjmp	.+46     	; 0x30a <set_PWM+0xba>
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	53 e4       	ldi	r21, 0x43	; 67
     2e4:	c7 01       	movw	r24, r14
     2e6:	b6 01       	movw	r22, r12
     2e8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__mulsf3>
     2ec:	9b 01       	movw	r18, r22
     2ee:	ac 01       	movw	r20, r24
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	74 e2       	ldi	r23, 0x24	; 36
     2f4:	84 ef       	ldi	r24, 0xF4	; 244
     2f6:	9a e4       	ldi	r25, 0x4A	; 74
     2f8:	c8 d7       	rcall	.+3984   	; 0x128a <__divsf3>
     2fa:	0e 94 ad 09 	call	0x135a	; 0x135a <__fixsfsi>
     2fe:	61 50       	subi	r22, 0x01	; 1
     300:	71 09       	sbc	r23, r1
     302:	70 93 99 00 	sts	0x0099, r23
     306:	60 93 98 00 	sts	0x0098, r22
     30a:	10 92 95 00 	sts	0x0095, r1
     30e:	10 92 94 00 	sts	0x0094, r1
     312:	c0 92 9d 03 	sts	0x039D, r12
     316:	d0 92 9e 03 	sts	0x039E, r13
     31a:	e0 92 9f 03 	sts	0x039F, r14
     31e:	f0 92 a0 03 	sts	0x03A0, r15
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	df 90       	pop	r13
     328:	cf 90       	pop	r12
     32a:	08 95       	ret

0000032c <PWM_on>:
     32c:	80 e4       	ldi	r24, 0x40	; 64
     32e:	80 93 90 00 	sts	0x0090, r24
     332:	8b e0       	ldi	r24, 0x0B	; 11
     334:	80 93 91 00 	sts	0x0091, r24
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	cb 01       	movw	r24, r22
     33e:	88 cf       	rjmp	.-240    	; 0x250 <set_PWM>
     340:	08 95       	ret

00000342 <ADC_init>:
}

	
void ADC_init()
{
	ADMUX = (1<<REFS0);
     342:	80 e4       	ldi	r24, 0x40	; 64
     344:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     348:	87 e8       	ldi	r24, 0x87	; 135
     34a:	80 93 7a 00 	sts	0x007A, r24
     34e:	08 95       	ret

00000350 <ReadADC>:
}

uint16_t ReadADC(uint8_t ch) {
	ch &= 0x07;
	ADMUX = (ADMUX & 0xF8) | ch;
     350:	ec e7       	ldi	r30, 0x7C	; 124
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	90 81       	ld	r25, Z
	ADMUX = (1<<REFS0);
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
}

uint16_t ReadADC(uint8_t ch) {
	ch &= 0x07;
     356:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8) | ch;
     358:	98 7f       	andi	r25, 0xF8	; 248
     35a:	98 2b       	or	r25, r24
     35c:	90 83       	st	Z, r25
	ADCSRA |= (1 << ADSC);
     35e:	ea e7       	ldi	r30, 0x7A	; 122
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	80 64       	ori	r24, 0x40	; 64
     366:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
     368:	80 81       	ld	r24, Z
     36a:	86 fd       	sbrc	r24, 6
     36c:	fd cf       	rjmp	.-6      	; 0x368 <ReadADC+0x18>
	ADCSRA |= (1 << ADIF);
     36e:	ea e7       	ldi	r30, 0x7A	; 122
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	80 81       	ld	r24, Z
     374:	80 61       	ori	r24, 0x10	; 16
     376:	80 83       	st	Z, r24
	return (ADC);
     378:	80 91 78 00 	lds	r24, 0x0078
     37c:	90 91 79 00 	lds	r25, 0x0079
}
     380:	08 95       	ret

00000382 <joyInput>:

//0x01 down, 0x02 up, 0x04 right, 0x08 left
unsigned char joyInput() {
     382:	cf 93       	push	r28
	unsigned char inp = 0x00;
	int temp = ReadADC(5) - 560; //up down
     384:	85 e0       	ldi	r24, 0x05	; 5
     386:	e4 df       	rcall	.-56     	; 0x350 <ReadADC>
     388:	80 53       	subi	r24, 0x30	; 48
     38a:	92 40       	sbci	r25, 0x02	; 2
	if (temp > 0 + 50) {inp |= 0x01;}
     38c:	c1 e0       	ldi	r28, 0x01	; 1
     38e:	83 33       	cpi	r24, 0x33	; 51
     390:	91 05       	cpc	r25, r1
     392:	0c f4       	brge	.+2      	; 0x396 <joyInput+0x14>
     394:	c0 e0       	ldi	r28, 0x00	; 0
	if (temp < 0 - 50) {inp |= 0x02;}
     396:	8e 3c       	cpi	r24, 0xCE	; 206
     398:	9f 4f       	sbci	r25, 0xFF	; 255
     39a:	0c f4       	brge	.+2      	; 0x39e <joyInput+0x1c>
     39c:	c2 60       	ori	r28, 0x02	; 2
	temp = ReadADC(6) - 543; //left right
     39e:	86 e0       	ldi	r24, 0x06	; 6
     3a0:	d7 df       	rcall	.-82     	; 0x350 <ReadADC>
     3a2:	8f 51       	subi	r24, 0x1F	; 31
     3a4:	92 40       	sbci	r25, 0x02	; 2
	if (temp > 0 + 50) {inp |= 0x04;}
     3a6:	83 33       	cpi	r24, 0x33	; 51
     3a8:	91 05       	cpc	r25, r1
     3aa:	0c f0       	brlt	.+2      	; 0x3ae <joyInput+0x2c>
     3ac:	c4 60       	ori	r28, 0x04	; 4
	if (temp < 0 - 50) {inp |= 0x08;}
     3ae:	8e 3c       	cpi	r24, 0xCE	; 206
     3b0:	9f 4f       	sbci	r25, 0xFF	; 255
     3b2:	0c f4       	brge	.+2      	; 0x3b6 <joyInput+0x34>
     3b4:	c8 60       	ori	r28, 0x08	; 8
	return inp;
}
     3b6:	8c 2f       	mov	r24, r28
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <lcdWrite>:

void lcdWrite(unsigned char cursor, unsigned short score) {
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	08 2f       	mov	r16, r24
     3c6:	eb 01       	movw	r28, r22
     3c8:	14 e0       	ldi	r17, 0x04	; 4
     3ca:	18 0f       	add	r17, r24
	for (unsigned i = 0; i < 4; ++i) {
		LCD_Cursor(cursor + 4);
     3cc:	81 2f       	mov	r24, r17
     3ce:	ff d6       	rcall	.+3582   	; 0x11ce <LCD_Cursor>
		unsigned char digit = score%10 + '0';
     3d0:	9e 01       	movw	r18, r28
     3d2:	ad ec       	ldi	r26, 0xCD	; 205
     3d4:	bc ec       	ldi	r27, 0xCC	; 204
     3d6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__umulhisi3>
     3da:	96 95       	lsr	r25
     3dc:	87 95       	ror	r24
     3de:	96 95       	lsr	r25
     3e0:	87 95       	ror	r24
     3e2:	96 95       	lsr	r25
     3e4:	87 95       	ror	r24
     3e6:	ac 01       	movw	r20, r24
     3e8:	44 0f       	add	r20, r20
     3ea:	55 1f       	adc	r21, r21
     3ec:	9c 01       	movw	r18, r24
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	22 0f       	add	r18, r18
     3f4:	33 1f       	adc	r19, r19
     3f6:	22 0f       	add	r18, r18
     3f8:	33 1f       	adc	r19, r19
     3fa:	24 0f       	add	r18, r20
     3fc:	35 1f       	adc	r19, r21
     3fe:	ce 01       	movw	r24, r28
     400:	82 1b       	sub	r24, r18
     402:	93 0b       	sbc	r25, r19
     404:	9c 01       	movw	r18, r24
     406:	80 e3       	ldi	r24, 0x30	; 48
     408:	82 0f       	add	r24, r18
		LCD_WriteData(digit);
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	e8 d6       	rcall	.+3536   	; 0x11de <LCD_WriteData>
		score = score / 10;
     40e:	9e 01       	movw	r18, r28
     410:	ad ec       	ldi	r26, 0xCD	; 205
     412:	bc ec       	ldi	r27, 0xCC	; 204
     414:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__umulhisi3>
     418:	ec 01       	movw	r28, r24
     41a:	d6 95       	lsr	r29
     41c:	c7 95       	ror	r28
     41e:	d6 95       	lsr	r29
     420:	c7 95       	ror	r28
     422:	d6 95       	lsr	r29
     424:	c7 95       	ror	r28
     426:	11 50       	subi	r17, 0x01	; 1
	if (temp < 0 - 50) {inp |= 0x08;}
	return inp;
}

void lcdWrite(unsigned char cursor, unsigned short score) {
	for (unsigned i = 0; i < 4; ++i) {
     428:	10 13       	cpse	r17, r16
     42a:	d0 cf       	rjmp	.-96     	; 0x3cc <lcdWrite+0x10>
		unsigned char digit = score%10 + '0';
		LCD_WriteData(digit);
		score = score / 10;
		--cursor;
	}
	LCD_Cursor(32);
     42c:	80 e2       	ldi	r24, 0x20	; 32
     42e:	cf d6       	rcall	.+3486   	; 0x11ce <LCD_Cursor>
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <menuSM>:

unsigned char displayToggle = 0;
unsigned char songToggle = 0;
unsigned char gameToggle = 0;
enum menu {init, start, selector, song} menuState;
void menuSM() {
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
	unsigned temp = ~PINA & 0x07;
     43e:	80 b1       	in	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	80 95       	com	r24
     444:	90 95       	com	r25
     446:	ec 01       	movw	r28, r24
     448:	c7 70       	andi	r28, 0x07	; 7
     44a:	dd 27       	eor	r29, r29
	switch(menuState) {
     44c:	80 91 b5 03 	lds	r24, 0x03B5
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	51 f0       	breq	.+20     	; 0x468 <menuSM+0x2e>
     454:	28 f0       	brcs	.+10     	; 0x460 <menuSM+0x26>
     456:	82 30       	cpi	r24, 0x02	; 2
     458:	a1 f0       	breq	.+40     	; 0x482 <menuSM+0x48>
     45a:	83 30       	cpi	r24, 0x03	; 3
     45c:	49 f1       	breq	.+82     	; 0x4b0 <menuSM+0x76>
     45e:	30 c0       	rjmp	.+96     	; 0x4c0 <menuSM+0x86>
		case init:
			menuState = start;
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 b5 03 	sts	0x03B5, r24
			break;
     466:	3e c0       	rjmp	.+124    	; 0x4e4 <menuSM+0xaa>
		case start:
			if (temp == 0x01 || temp == 0x02 || temp == 0x04) {
     468:	ce 01       	movw	r24, r28
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	02 97       	sbiw	r24, 0x02	; 2
     46e:	18 f0       	brcs	.+6      	; 0x476 <menuSM+0x3c>
     470:	c4 30       	cpi	r28, 0x04	; 4
     472:	d1 05       	cpc	r29, r1
     474:	b9 f5       	brne	.+110    	; 0x4e4 <menuSM+0xaa>
				menuState = selector;
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	80 93 b5 03 	sts	0x03B5, r24
				displayToggle = 0;
     47c:	10 92 a8 03 	sts	0x03A8, r1
     480:	1f c0       	rjmp	.+62     	; 0x4c0 <menuSM+0x86>
			else {
				menuState = start;
			}
			break;
		case selector:
			if (temp == 0x01) {
     482:	c1 30       	cpi	r28, 0x01	; 1
     484:	d1 05       	cpc	r29, r1
     486:	d1 f5       	brne	.+116    	; 0x4fc <menuSM+0xc2>
				LCD_DisplayString(1, songs[k]);
     488:	e0 91 a9 03 	lds	r30, 0x03A9
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	e6 5d       	subi	r30, 0xD6	; 214
     494:	fe 4f       	sbci	r31, 0xFE	; 254
     496:	60 81       	ld	r22, Z
     498:	71 81       	ldd	r23, Z+1	; 0x01
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	c5 d6       	rcall	.+3466   	; 0x1228 <LCD_DisplayString>
				songToggle = 1;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	80 93 a7 03 	sts	0x03A7, r24
				menuState = song;
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	80 93 b5 03 	sts	0x03B5, r24
				displayToggle = 0;
     4aa:	10 92 a8 03 	sts	0x03A8, r1
     4ae:	08 c0       	rjmp	.+16     	; 0x4c0 <menuSM+0x86>
			else {
				menuState = selector;
			}
			break;
		case song:
			if (songToggle == 0) {
     4b0:	80 91 a7 03 	lds	r24, 0x03A7
     4b4:	81 11       	cpse	r24, r1
     4b6:	55 c0       	rjmp	.+170    	; 0x562 <menuSM+0x128>
				menuState = selector;
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	80 93 b5 03 	sts	0x03B5, r24
     4be:	1e c0       	rjmp	.+60     	; 0x4fc <menuSM+0xc2>
			else if (songToggle == 1) {
				menuState = song;
			}
			break;
	}
	switch(menuState) {
     4c0:	80 91 b5 03 	lds	r24, 0x03B5
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	71 f0       	breq	.+28     	; 0x4e4 <menuSM+0xaa>
     4c8:	30 f0       	brcs	.+12     	; 0x4d6 <menuSM+0x9c>
     4ca:	82 30       	cpi	r24, 0x02	; 2
     4cc:	b9 f0       	breq	.+46     	; 0x4fc <menuSM+0xc2>
     4ce:	83 30       	cpi	r24, 0x03	; 3
     4d0:	09 f0       	breq	.+2      	; 0x4d4 <menuSM+0x9a>
     4d2:	8a c0       	rjmp	.+276    	; 0x5e8 <menuSM+0x1ae>
     4d4:	46 c0       	rjmp	.+140    	; 0x562 <menuSM+0x128>
		case init:
			k = 0;
     4d6:	10 92 a9 03 	sts	0x03A9, r1
			displayToggle = 0;
     4da:	10 92 a8 03 	sts	0x03A8, r1
			songToggle = 0;
     4de:	10 92 a7 03 	sts	0x03A7, r1
			break;
     4e2:	82 c0       	rjmp	.+260    	; 0x5e8 <menuSM+0x1ae>
		case start:
			if (displayToggle == 0) {LCD_DisplayString(1, "Button Hero     Press to Start");}
     4e4:	80 91 a8 03 	lds	r24, 0x03A8
     4e8:	81 11       	cpse	r24, r1
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <menuSM+0xba>
     4ec:	62 e4       	ldi	r22, 0x42	; 66
     4ee:	73 e0       	ldi	r23, 0x03	; 3
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	9a d6       	rcall	.+3380   	; 0x1228 <LCD_DisplayString>
			displayToggle = 1;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 a8 03 	sts	0x03A8, r24
			break;
     4fa:	76 c0       	rjmp	.+236    	; 0x5e8 <menuSM+0x1ae>
		case selector:
			if (temp == 0x02) {
     4fc:	c2 30       	cpi	r28, 0x02	; 2
     4fe:	d1 05       	cpc	r29, r1
     500:	89 f4       	brne	.+34     	; 0x524 <menuSM+0xea>
				//go right
				if (k < numberOfSongs - 1) {
     502:	40 91 a9 03 	lds	r20, 0x03A9
     506:	24 2f       	mov	r18, r20
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	80 91 2f 03 	lds	r24, 0x032F
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	28 17       	cp	r18, r24
     514:	39 07       	cpc	r19, r25
     516:	94 f4       	brge	.+36     	; 0x53c <menuSM+0x102>
					++k;
     518:	4f 5f       	subi	r20, 0xFF	; 255
     51a:	40 93 a9 03 	sts	0x03A9, r20
					displayToggle = 0;
     51e:	10 92 a8 03 	sts	0x03A8, r1
     522:	10 c0       	rjmp	.+32     	; 0x544 <menuSM+0x10a>
					}
			}
			else if (temp == 0x04) {
     524:	24 97       	sbiw	r28, 0x04	; 4
     526:	51 f4       	brne	.+20     	; 0x53c <menuSM+0x102>
				//go left
				if (k > 0) {
     528:	80 91 a9 03 	lds	r24, 0x03A9
     52c:	88 23       	and	r24, r24
     52e:	31 f0       	breq	.+12     	; 0x53c <menuSM+0x102>
					--k;
     530:	81 50       	subi	r24, 0x01	; 1
     532:	80 93 a9 03 	sts	0x03A9, r24
					displayToggle = 0;
     536:	10 92 a8 03 	sts	0x03A8, r1
     53a:	04 c0       	rjmp	.+8      	; 0x544 <menuSM+0x10a>
				}
			}
			if (displayToggle == 0) {LCD_DisplayString(1, songs[k]);}
     53c:	80 91 a8 03 	lds	r24, 0x03A8
     540:	81 11       	cpse	r24, r1
     542:	0b c0       	rjmp	.+22     	; 0x55a <menuSM+0x120>
     544:	e0 91 a9 03 	lds	r30, 0x03A9
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	e6 5d       	subi	r30, 0xD6	; 214
     550:	fe 4f       	sbci	r31, 0xFE	; 254
     552:	60 81       	ld	r22, Z
     554:	71 81       	ldd	r23, Z+1	; 0x01
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	67 d6       	rcall	.+3278   	; 0x1228 <LCD_DisplayString>
			displayToggle = 1;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 93 a8 03 	sts	0x03A8, r24
			break;
     560:	43 c0       	rjmp	.+134    	; 0x5e8 <menuSM+0x1ae>
		case song:
			
			if (displayToggle == 0) {
     562:	80 91 a8 03 	lds	r24, 0x03A8
     566:	81 11       	cpse	r24, r1
     568:	2a c0       	rjmp	.+84     	; 0x5be <menuSM+0x184>
				LCD_Cursor(17);
     56a:	81 e1       	ldi	r24, 0x11	; 17
     56c:	30 d6       	rcall	.+3168   	; 0x11ce <LCD_Cursor>
				LCD_WriteData('S');
     56e:	83 e5       	ldi	r24, 0x53	; 83
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	35 d6       	rcall	.+3178   	; 0x11de <LCD_WriteData>
				LCD_Cursor(18);
     574:	82 e1       	ldi	r24, 0x12	; 18
     576:	2b d6       	rcall	.+3158   	; 0x11ce <LCD_Cursor>
				LCD_WriteData('c');
     578:	83 e6       	ldi	r24, 0x63	; 99
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	30 d6       	rcall	.+3168   	; 0x11de <LCD_WriteData>
				LCD_Cursor(19);
     57e:	83 e1       	ldi	r24, 0x13	; 19
     580:	26 d6       	rcall	.+3148   	; 0x11ce <LCD_Cursor>
				LCD_WriteData('o');
     582:	8f e6       	ldi	r24, 0x6F	; 111
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	2b d6       	rcall	.+3158   	; 0x11de <LCD_WriteData>
				LCD_Cursor(20);
     588:	84 e1       	ldi	r24, 0x14	; 20
     58a:	21 d6       	rcall	.+3138   	; 0x11ce <LCD_Cursor>
				LCD_WriteData('r');
     58c:	82 e7       	ldi	r24, 0x72	; 114
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	26 d6       	rcall	.+3148   	; 0x11de <LCD_WriteData>
				LCD_Cursor(21);
     592:	85 e1       	ldi	r24, 0x15	; 21
     594:	1c d6       	rcall	.+3128   	; 0x11ce <LCD_Cursor>
				LCD_WriteData('e');
     596:	85 e6       	ldi	r24, 0x65	; 101
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	21 d6       	rcall	.+3138   	; 0x11de <LCD_WriteData>
				LCD_Cursor(22);
     59c:	86 e1       	ldi	r24, 0x16	; 22
     59e:	17 d6       	rcall	.+3118   	; 0x11ce <LCD_Cursor>
				LCD_WriteData(':');
     5a0:	8a e3       	ldi	r24, 0x3A	; 58
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	1c d6       	rcall	.+3128   	; 0x11de <LCD_WriteData>
				LCD_Cursor(23);
     5a6:	87 e1       	ldi	r24, 0x17	; 23
     5a8:	12 d6       	rcall	.+3108   	; 0x11ce <LCD_Cursor>
				LCD_WriteData(' ');
     5aa:	80 e2       	ldi	r24, 0x20	; 32
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	17 d6       	rcall	.+3118   	; 0x11de <LCD_WriteData>
				lcdWrite(24, 0);
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	88 e1       	ldi	r24, 0x18	; 24
     5b6:	02 df       	rcall	.-508    	; 0x3bc <lcdWrite>
				displayToggle = 1;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	80 93 a8 03 	sts	0x03A8, r24
			}
			if (oldScore != newScore) {
     5be:	60 91 ac 03 	lds	r22, 0x03AC
     5c2:	70 91 ad 03 	lds	r23, 0x03AD
     5c6:	80 91 ae 03 	lds	r24, 0x03AE
     5ca:	90 91 af 03 	lds	r25, 0x03AF
     5ce:	86 17       	cp	r24, r22
     5d0:	97 07       	cpc	r25, r23
     5d2:	51 f0       	breq	.+20     	; 0x5e8 <menuSM+0x1ae>
				lcdWrite(24, newScore);
     5d4:	88 e1       	ldi	r24, 0x18	; 24
     5d6:	f2 de       	rcall	.-540    	; 0x3bc <lcdWrite>
				oldScore = newScore;
     5d8:	80 91 ac 03 	lds	r24, 0x03AC
     5dc:	90 91 ad 03 	lds	r25, 0x03AD
     5e0:	90 93 af 03 	sts	0x03AF, r25
     5e4:	80 93 ae 03 	sts	0x03AE, r24
			}
			break;
	}
	};
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <mMatrix>:
unsigned char dbRed[] =	   {0x00, 0x60, 0x00, 0x00};
unsigned char dbGreen[] =  {0x00, 0x00, 0x18, 0x00};
unsigned char dbBlue[] =   {0x00, 0x00, 0x00, 0x06};
	
unsigned char* mDefault[] = {dDefault, dRed, dGreen, dBlue, dbRed, dbGreen, dbBlue};
void mMatrix() {
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	c0 e0       	ldi	r28, 0x00	; 0
     5f8:	d1 e0       	ldi	r29, 0x01	; 1
     5fa:	0e e0       	ldi	r16, 0x0E	; 14
     5fc:	11 e0       	ldi	r17, 0x01	; 1
	for (unsigned i = 0; i < 7; ++i) {
		RGBmatrix(mDefault[i][0], mDefault[i][1], mDefault[i][2], mDefault[i][3]);
     5fe:	e9 91       	ld	r30, Y+
     600:	f9 91       	ld	r31, Y+
     602:	23 81       	ldd	r18, Z+3	; 0x03
     604:	42 81       	ldd	r20, Z+2	; 0x02
     606:	61 81       	ldd	r22, Z+1	; 0x01
     608:	80 81       	ld	r24, Z
     60a:	ad dd       	rcall	.-1190   	; 0x166 <RGBmatrix>
unsigned char dbGreen[] =  {0x00, 0x00, 0x18, 0x00};
unsigned char dbBlue[] =   {0x00, 0x00, 0x00, 0x06};
	
unsigned char* mDefault[] = {dDefault, dRed, dGreen, dBlue, dbRed, dbGreen, dbBlue};
void mMatrix() {
	for (unsigned i = 0; i < 7; ++i) {
     60c:	c0 17       	cp	r28, r16
     60e:	d1 07       	cpc	r29, r17
     610:	b1 f7       	brne	.-20     	; 0x5fe <mMatrix+0x10>
		RGBmatrix(mDefault[i][0], mDefault[i][1], mDefault[i][2], mDefault[i][3]);
	}
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	08 95       	ret

0000061c <noteOn>:

double noteOn(unsigned char k, unsigned char time) {
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	16 2f       	mov	r17, r22
	unsigned char index = 0;
	double current;
	unsigned char count = 0;
	while (1) {
		current = songNotes[k][index];
     628:	48 2f       	mov	r20, r24
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	9a 01       	movw	r18, r20
     62e:	22 0f       	add	r18, r18
     630:	33 1f       	adc	r19, r19
     632:	f9 01       	movw	r30, r18
     634:	ed 5a       	subi	r30, 0xAD	; 173
     636:	fe 4f       	sbci	r31, 0xFE	; 254
     638:	a0 81       	ld	r26, Z
     63a:	b1 81       	ldd	r27, Z+1	; 0x01
     63c:	6d 91       	ld	r22, X+
     63e:	7d 91       	ld	r23, X+
     640:	8d 91       	ld	r24, X+
     642:	9c 91       	ld	r25, X
     644:	13 97       	sbiw	r26, 0x03	; 3
		count += songHeldHigh[k][index];
     646:	f9 01       	movw	r30, r18
     648:	e1 5b       	subi	r30, 0xB1	; 177
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	c0 81       	ld	r28, Z
     64e:	d1 81       	ldd	r29, Z+1	; 0x01
     650:	28 81       	ld	r18, Y
		if (count >= time) {break;}
     652:	21 17       	cp	r18, r17
     654:	98 f5       	brcc	.+102    	; 0x6bc <noteOn+0xa0>
		
		current = -1;
		count += songBlankHigh[k][index];
     656:	fa 01       	movw	r30, r20
     658:	ee 0f       	add	r30, r30
     65a:	ff 1f       	adc	r31, r31
     65c:	e5 5b       	subi	r30, 0xB5	; 181
     65e:	fe 4f       	sbci	r31, 0xFE	; 254
     660:	40 81       	ld	r20, Z
     662:	51 81       	ldd	r21, Z+1	; 0x01
     664:	fa 01       	movw	r30, r20
     666:	f0 80       	ld	r15, Z
     668:	f2 0e       	add	r15, r18
		if (count >= time) {break;}
     66a:	f1 16       	cp	r15, r17
     66c:	f0 f4       	brcc	.+60     	; 0x6aa <noteOn+0x8e>
		RGBmatrix(mDefault[i][0], mDefault[i][1], mDefault[i][2], mDefault[i][3]);
	}
}

double noteOn(unsigned char k, unsigned char time) {
	unsigned char index = 0;
     66e:	00 e0       	ldi	r16, 0x00	; 0
     670:	07 c0       	rjmp	.+14     	; 0x680 <noteOn+0x64>
		current = songNotes[k][index];
		count += songHeldHigh[k][index];
		if (count >= time) {break;}
		
		current = -1;
		count += songBlankHigh[k][index];
     672:	fa 01       	movw	r30, r20
     674:	e2 0f       	add	r30, r18
     676:	f3 1f       	adc	r31, r19
     678:	80 81       	ld	r24, Z
     67a:	f8 0e       	add	r15, r24
		if (count >= time) {break;}
     67c:	f1 16       	cp	r15, r17
     67e:	d0 f4       	brcc	.+52     	; 0x6b4 <noteOn+0x98>

		++index;
     680:	0f 5f       	subi	r16, 0xFF	; 255
double noteOn(unsigned char k, unsigned char time) {
	unsigned char index = 0;
	double current;
	unsigned char count = 0;
	while (1) {
		current = songNotes[k][index];
     682:	20 2f       	mov	r18, r16
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	fd 01       	movw	r30, r26
     688:	84 e0       	ldi	r24, 0x04	; 4
     68a:	08 9f       	mul	r16, r24
     68c:	e0 0d       	add	r30, r0
     68e:	f1 1d       	adc	r31, r1
     690:	11 24       	eor	r1, r1
     692:	60 81       	ld	r22, Z
     694:	71 81       	ldd	r23, Z+1	; 0x01
     696:	82 81       	ldd	r24, Z+2	; 0x02
     698:	93 81       	ldd	r25, Z+3	; 0x03
		count += songHeldHigh[k][index];
     69a:	fe 01       	movw	r30, r28
     69c:	e2 0f       	add	r30, r18
     69e:	f3 1f       	adc	r31, r19
     6a0:	e0 81       	ld	r30, Z
     6a2:	fe 0e       	add	r15, r30
		if (count >= time) {break;}
     6a4:	f1 16       	cp	r15, r17
     6a6:	28 f3       	brcs	.-54     	; 0x672 <noteOn+0x56>
     6a8:	09 c0       	rjmp	.+18     	; 0x6bc <noteOn+0xa0>
		
		current = -1;
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	80 e8       	ldi	r24, 0x80	; 128
     6b0:	9f eb       	ldi	r25, 0xBF	; 191
     6b2:	04 c0       	rjmp	.+8      	; 0x6bc <noteOn+0xa0>
     6b4:	60 e0       	ldi	r22, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	80 e8       	ldi	r24, 0x80	; 128
     6ba:	9f eb       	ldi	r25, 0xBF	; 191
		if (count >= time) {break;}

		++index;
	}
	return current;
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	ff 90       	pop	r15
     6c6:	08 95       	ret

000006c8 <mConvert>:
void mConvert(unsigned char kSong, unsigned char elapsedTime) {
     6c8:	7f 92       	push	r7
     6ca:	8f 92       	push	r8
     6cc:	9f 92       	push	r9
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	98 2e       	mov	r9, r24
     6e4:	a6 2e       	mov	r10, r22
     6e6:	c0 e0       	ldi	r28, 0x00	; 0
     6e8:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char r = 0x00;
	unsigned char g = 0x00;
	unsigned char b = 0x00;
     6ea:	71 2c       	mov	r7, r1
	}
	return current;
}
void mConvert(unsigned char kSong, unsigned char elapsedTime) {
	unsigned char r = 0x00;
	unsigned char g = 0x00;
     6ec:	81 2c       	mov	r8, r1
		++index;
	}
	return current;
}
void mConvert(unsigned char kSong, unsigned char elapsedTime) {
	unsigned char r = 0x00;
     6ee:	b1 2c       	mov	r11, r1
		else if (temp == C) {
			r |= 0x02 << i;
			b |= 0x02 << i;
		}
		else if (temp == B) {
			r |= 0x02 << i;
     6f0:	02 e0       	ldi	r16, 0x02	; 2
     6f2:	10 e0       	ldi	r17, 0x00	; 0
     6f4:	6c 2f       	mov	r22, r28
     6f6:	6a 0d       	add	r22, r10
	unsigned char r = 0x00;
	unsigned char g = 0x00;
	unsigned char b = 0x00;

	for (unsigned char i = 0; i < 7; ++i) {
		double temp = noteOn(kSong, elapsedTime + i);
     6f8:	89 2d       	mov	r24, r9
     6fa:	90 df       	rcall	.-224    	; 0x61c <noteOn>
     6fc:	6b 01       	movw	r12, r22
     6fe:	7c 01       	movw	r14, r24
		if (temp == E) {
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 ed       	ldi	r19, 0xD0	; 208
     704:	44 e2       	ldi	r20, 0x24	; 36
     706:	54 e4       	ldi	r21, 0x44	; 68
     708:	bc d5       	rcall	.+2936   	; 0x1282 <__cmpsf2>
     70a:	81 11       	cpse	r24, r1
     70c:	09 c0       	rjmp	.+18     	; 0x720 <mConvert+0x58>
			r |= 0x02 << i;
     70e:	98 01       	movw	r18, r16
     710:	0c 2e       	mov	r0, r28
     712:	02 c0       	rjmp	.+4      	; 0x718 <mConvert+0x50>
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	0a 94       	dec	r0
     71a:	e2 f7       	brpl	.-8      	; 0x714 <mConvert+0x4c>
     71c:	b2 2a       	or	r11, r18
     71e:	70 c0       	rjmp	.+224    	; 0x800 <mConvert+0x138>
		}
		else if (temp == G) {
     720:	2c e5       	ldi	r18, 0x5C	; 92
     722:	3f ef       	ldi	r19, 0xFF	; 255
     724:	43 e4       	ldi	r20, 0x43	; 67
     726:	54 e4       	ldi	r21, 0x44	; 68
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	aa d5       	rcall	.+2900   	; 0x1282 <__cmpsf2>
     72e:	81 11       	cpse	r24, r1
     730:	09 c0       	rjmp	.+18     	; 0x744 <mConvert+0x7c>
			g |= 0x02 << i;
     732:	98 01       	movw	r18, r16
     734:	0c 2e       	mov	r0, r28
     736:	02 c0       	rjmp	.+4      	; 0x73c <mConvert+0x74>
     738:	22 0f       	add	r18, r18
     73a:	33 1f       	adc	r19, r19
     73c:	0a 94       	dec	r0
     73e:	e2 f7       	brpl	.-8      	; 0x738 <mConvert+0x70>
     740:	82 2a       	or	r8, r18
     742:	5e c0       	rjmp	.+188    	; 0x800 <mConvert+0x138>
		}
		else if (temp == F) {
     744:	21 e7       	ldi	r18, 0x71	; 113
     746:	3d e9       	ldi	r19, 0x9D	; 157
     748:	4e e2       	ldi	r20, 0x2E	; 46
     74a:	54 e4       	ldi	r21, 0x44	; 68
     74c:	c7 01       	movw	r24, r14
     74e:	b6 01       	movw	r22, r12
     750:	98 d5       	rcall	.+2864   	; 0x1282 <__cmpsf2>
     752:	81 11       	cpse	r24, r1
     754:	09 c0       	rjmp	.+18     	; 0x768 <mConvert+0xa0>
			b |= 0x02 << i;
     756:	c8 01       	movw	r24, r16
     758:	0c 2e       	mov	r0, r28
     75a:	02 c0       	rjmp	.+4      	; 0x760 <mConvert+0x98>
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	0a 94       	dec	r0
     762:	e2 f7       	brpl	.-8      	; 0x75c <mConvert+0x94>
     764:	78 2a       	or	r7, r24
     766:	4c c0       	rjmp	.+152    	; 0x800 <mConvert+0x138>
		}
		else if (temp == D) {
     768:	2f e1       	ldi	r18, 0x1F	; 31
     76a:	35 ed       	ldi	r19, 0xD5	; 213
     76c:	42 e1       	ldi	r20, 0x12	; 18
     76e:	54 e4       	ldi	r21, 0x44	; 68
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	86 d5       	rcall	.+2828   	; 0x1282 <__cmpsf2>
     776:	81 11       	cpse	r24, r1
     778:	0a c0       	rjmp	.+20     	; 0x78e <mConvert+0xc6>
			g |= 0x02 << i;
     77a:	c8 01       	movw	r24, r16
     77c:	0c 2e       	mov	r0, r28
     77e:	02 c0       	rjmp	.+4      	; 0x784 <mConvert+0xbc>
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	0a 94       	dec	r0
     786:	e2 f7       	brpl	.-8      	; 0x780 <mConvert+0xb8>
     788:	88 2a       	or	r8, r24
			b |= 0x02 << i;
     78a:	78 2a       	or	r7, r24
     78c:	39 c0       	rjmp	.+114    	; 0x800 <mConvert+0x138>
		}
		else if (temp == A) {
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	4c e5       	ldi	r20, 0x5C	; 92
     794:	54 e4       	ldi	r21, 0x44	; 68
     796:	c7 01       	movw	r24, r14
     798:	b6 01       	movw	r22, r12
     79a:	73 d5       	rcall	.+2790   	; 0x1282 <__cmpsf2>
     79c:	81 11       	cpse	r24, r1
     79e:	0a c0       	rjmp	.+20     	; 0x7b4 <mConvert+0xec>
			r |= 0x02 << i;
     7a0:	c8 01       	movw	r24, r16
     7a2:	0c 2e       	mov	r0, r28
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <mConvert+0xe2>
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	0a 94       	dec	r0
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <mConvert+0xde>
     7ae:	b8 2a       	or	r11, r24
			g |= 0x02 << i;
     7b0:	88 2a       	or	r8, r24
     7b2:	26 c0       	rjmp	.+76     	; 0x800 <mConvert+0x138>
		}
		else if (temp == C) {
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 ed       	ldi	r19, 0xD0	; 208
     7b8:	42 e0       	ldi	r20, 0x02	; 2
     7ba:	54 e4       	ldi	r21, 0x44	; 68
     7bc:	c7 01       	movw	r24, r14
     7be:	b6 01       	movw	r22, r12
     7c0:	60 d5       	rcall	.+2752   	; 0x1282 <__cmpsf2>
     7c2:	81 11       	cpse	r24, r1
     7c4:	0a c0       	rjmp	.+20     	; 0x7da <mConvert+0x112>
			r |= 0x02 << i;
     7c6:	c8 01       	movw	r24, r16
     7c8:	0c 2e       	mov	r0, r28
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <mConvert+0x108>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	0a 94       	dec	r0
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <mConvert+0x104>
     7d4:	b8 2a       	or	r11, r24
			b |= 0x02 << i;
     7d6:	78 2a       	or	r7, r24
     7d8:	13 c0       	rjmp	.+38     	; 0x800 <mConvert+0x138>
		}
		else if (temp == B) {
     7da:	24 ea       	ldi	r18, 0xA4	; 164
     7dc:	30 ef       	ldi	r19, 0xF0	; 240
     7de:	46 ef       	ldi	r20, 0xF6	; 246
     7e0:	53 e4       	ldi	r21, 0x43	; 67
     7e2:	c7 01       	movw	r24, r14
     7e4:	b6 01       	movw	r22, r12
     7e6:	4d d5       	rcall	.+2714   	; 0x1282 <__cmpsf2>
     7e8:	81 11       	cpse	r24, r1
     7ea:	0a c0       	rjmp	.+20     	; 0x800 <mConvert+0x138>
			r |= 0x02 << i;
     7ec:	c8 01       	movw	r24, r16
     7ee:	0c 2e       	mov	r0, r28
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <mConvert+0x12e>
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	0a 94       	dec	r0
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <mConvert+0x12a>
     7fa:	b8 2a       	or	r11, r24
			g |= 0x02 << i;
     7fc:	88 2a       	or	r8, r24
			b |= 0x02 << i;
     7fe:	78 2a       	or	r7, r24
     800:	21 96       	adiw	r28, 0x01	; 1
void mConvert(unsigned char kSong, unsigned char elapsedTime) {
	unsigned char r = 0x00;
	unsigned char g = 0x00;
	unsigned char b = 0x00;

	for (unsigned char i = 0; i < 7; ++i) {
     802:	c7 30       	cpi	r28, 0x07	; 7
     804:	d1 05       	cpc	r29, r1
     806:	09 f0       	breq	.+2      	; 0x80a <mConvert+0x142>
     808:	75 cf       	rjmp	.-278    	; 0x6f4 <mConvert+0x2c>
			g |= 0x02 << i;
			b |= 0x02 << i;
		}	
	}
	
	dRed[0] = r;
     80a:	b0 92 22 01 	sts	0x0122, r11
	dGreen[0] = g;
     80e:	80 92 1e 01 	sts	0x011E, r8
	dBlue[0] = b;
     812:	70 92 1a 01 	sts	0x011A, r7
}
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	bf 90       	pop	r11
     828:	af 90       	pop	r10
     82a:	9f 90       	pop	r9
     82c:	8f 90       	pop	r8
     82e:	7f 90       	pop	r7
     830:	08 95       	ret

00000832 <playerSM>:
unsigned char notePlay = 0;
unsigned char starPowerTime = 0;
unsigned char starPower = 0;
enum player {init2, wait, play, pause} playerState;
void playerSM() {
	switch(playerState) {
     832:	80 91 b8 03 	lds	r24, 0x03B8
     836:	81 30       	cpi	r24, 0x01	; 1
     838:	59 f0       	breq	.+22     	; 0x850 <playerSM+0x1e>
     83a:	30 f0       	brcs	.+12     	; 0x848 <playerSM+0x16>
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	d9 f0       	breq	.+54     	; 0x876 <playerSM+0x44>
     840:	83 30       	cpi	r24, 0x03	; 3
     842:	09 f4       	brne	.+2      	; 0x846 <playerSM+0x14>
     844:	55 c0       	rjmp	.+170    	; 0x8f0 <playerSM+0xbe>
     846:	7f c0       	rjmp	.+254    	; 0x946 <playerSM+0x114>
		case init2:
			playerState = wait;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	80 93 b8 03 	sts	0x03B8, r24
			break;
     84e:	08 95       	ret
		case wait:
			if (songToggle == 1) {
     850:	80 91 a7 03 	lds	r24, 0x03A7
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	09 f0       	breq	.+2      	; 0x85a <playerSM+0x28>
     858:	b9 c0       	rjmp	.+370    	; 0x9cc <playerSM+0x19a>
				playerState = play;
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	80 93 b8 03 	sts	0x03B8, r24
				++count;
     860:	80 91 a6 03 	lds	r24, 0x03A6
     864:	8f 5f       	subi	r24, 0xFF	; 255
     866:	80 93 a6 03 	sts	0x03A6, r24
				++starPowerTime;
     86a:	80 91 a4 03 	lds	r24, 0x03A4
     86e:	8f 5f       	subi	r24, 0xFF	; 255
     870:	80 93 a4 03 	sts	0x03A4, r24
     874:	68 c0       	rjmp	.+208    	; 0x946 <playerSM+0x114>
			else {
				playerState = wait;
			}
			break;
		case play:
			if (starPowerTime > 25) {starPower = 0;}
     876:	40 91 a4 03 	lds	r20, 0x03A4
     87a:	4a 31       	cpi	r20, 0x1A	; 26
     87c:	10 f0       	brcs	.+4      	; 0x882 <playerSM+0x50>
     87e:	10 92 a3 03 	sts	0x03A3, r1
			++j;
     882:	30 91 aa 03 	lds	r19, 0x03AA
     886:	3f 5f       	subi	r19, 0xFF	; 255
     888:	30 93 aa 03 	sts	0x03AA, r19
			if (i < songLength[k]) {
     88c:	80 91 a9 03 	lds	r24, 0x03A9
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	20 91 ab 03 	lds	r18, 0x03AB
     896:	fc 01       	movw	r30, r24
     898:	e7 5b       	subi	r30, 0xB7	; 183
     89a:	fe 4f       	sbci	r31, 0xFE	; 254
     89c:	50 81       	ld	r21, Z
     89e:	25 17       	cp	r18, r21
     8a0:	10 f5       	brcc	.+68     	; 0x8e6 <playerSM+0xb4>
				if (j > songHeldHigh[k][i]) {
     8a2:	fc 01       	movw	r30, r24
     8a4:	ee 0f       	add	r30, r30
     8a6:	ff 1f       	adc	r31, r31
     8a8:	e1 5b       	subi	r30, 0xB1	; 177
     8aa:	fe 4f       	sbci	r31, 0xFE	; 254
     8ac:	01 90       	ld	r0, Z+
     8ae:	f0 81       	ld	r31, Z
     8b0:	e0 2d       	mov	r30, r0
     8b2:	e2 0f       	add	r30, r18
     8b4:	f1 1d       	adc	r31, r1
     8b6:	80 81       	ld	r24, Z
     8b8:	83 17       	cp	r24, r19
     8ba:	48 f4       	brcc	.+18     	; 0x8ce <playerSM+0x9c>
					++i;
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	20 93 ab 03 	sts	0x03AB, r18
					playerState = pause;
     8c2:	83 e0       	ldi	r24, 0x03	; 3
     8c4:	80 93 b8 03 	sts	0x03B8, r24
					j = 0;
     8c8:	10 92 aa 03 	sts	0x03AA, r1
     8cc:	3c c0       	rjmp	.+120    	; 0x946 <playerSM+0x114>
				}
				else {
					playerState = play;
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	80 93 b8 03 	sts	0x03B8, r24
					++count;
     8d4:	80 91 a6 03 	lds	r24, 0x03A6
     8d8:	8f 5f       	subi	r24, 0xFF	; 255
     8da:	80 93 a6 03 	sts	0x03A6, r24
					++starPowerTime;
     8de:	4f 5f       	subi	r20, 0xFF	; 255
     8e0:	40 93 a4 03 	sts	0x03A4, r20
     8e4:	30 c0       	rjmp	.+96     	; 0x946 <playerSM+0x114>
				}
			}
			else {
				songToggle = 0;
     8e6:	10 92 a7 03 	sts	0x03A7, r1
				playerState = init2;
     8ea:	10 92 b8 03 	sts	0x03B8, r1
     8ee:	33 c0       	rjmp	.+102    	; 0x956 <playerSM+0x124>
			}
			break;
		case pause:
			if (starPowerTime > 25) {starPower = 0;}
     8f0:	80 91 a4 03 	lds	r24, 0x03A4
     8f4:	8a 31       	cpi	r24, 0x1A	; 26
     8f6:	10 f0       	brcs	.+4      	; 0x8fc <playerSM+0xca>
     8f8:	10 92 a3 03 	sts	0x03A3, r1
			++j;
     8fc:	80 91 aa 03 	lds	r24, 0x03AA
     900:	8f 5f       	subi	r24, 0xFF	; 255
     902:	80 93 aa 03 	sts	0x03AA, r24
			if (j > songBlankHigh[k][i-1]) {
     906:	e0 91 a9 03 	lds	r30, 0x03A9
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	e5 5b       	subi	r30, 0xB5	; 181
     912:	fe 4f       	sbci	r31, 0xFE	; 254
     914:	90 91 ab 03 	lds	r25, 0x03AB
     918:	01 90       	ld	r0, Z+
     91a:	f0 81       	ld	r31, Z
     91c:	e0 2d       	mov	r30, r0
     91e:	e9 0f       	add	r30, r25
     920:	f1 1d       	adc	r31, r1
     922:	31 97       	sbiw	r30, 0x01	; 1
     924:	90 81       	ld	r25, Z
     926:	98 17       	cp	r25, r24
     928:	30 f4       	brcc	.+12     	; 0x936 <playerSM+0x104>
				playerState = play;
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	80 93 b8 03 	sts	0x03B8, r24
				j = 0;
     930:	10 92 aa 03 	sts	0x03AA, r1
     934:	08 c0       	rjmp	.+16     	; 0x946 <playerSM+0x114>
			}
			else {
				playerState = pause;
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	80 93 b8 03 	sts	0x03B8, r24
				++count;
     93c:	80 91 a6 03 	lds	r24, 0x03A6
     940:	8f 5f       	subi	r24, 0xFF	; 255
     942:	80 93 a6 03 	sts	0x03A6, r24
			}
			break;
	}
	switch(playerState) {
     946:	80 91 b8 03 	lds	r24, 0x03B8
     94a:	82 30       	cpi	r24, 0x02	; 2
     94c:	89 f0       	breq	.+34     	; 0x970 <playerSM+0x13e>
     94e:	83 30       	cpi	r24, 0x03	; 3
     950:	a1 f1       	breq	.+104    	; 0x9ba <playerSM+0x188>
     952:	81 11       	cpse	r24, r1
     954:	3b c0       	rjmp	.+118    	; 0x9cc <playerSM+0x19a>
		case init2:
			i = 0;
     956:	10 92 ab 03 	sts	0x03AB, r1
			j = 0;
     95a:	10 92 aa 03 	sts	0x03AA, r1
			count = 0;
     95e:	10 92 a6 03 	sts	0x03A6, r1
			starPowerTime = 0;
     962:	10 92 a4 03 	sts	0x03A4, r1
			set_PWM(0.0);
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	cb 01       	movw	r24, r22
     96c:	71 cc       	rjmp	.-1822   	; 0x250 <set_PWM>
			break;
     96e:	08 95       	ret
		case wait:
			break;
		case play:
			if (notePlay == 1) {
     970:	80 91 a5 03 	lds	r24, 0x03A5
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	b9 f4       	brne	.+46     	; 0x9a6 <playerSM+0x174>
				set_PWM(songNotes[k][i]);
     978:	e0 91 a9 03 	lds	r30, 0x03A9
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	ed 5a       	subi	r30, 0xAD	; 173
     984:	fe 4f       	sbci	r31, 0xFE	; 254
     986:	80 91 ab 03 	lds	r24, 0x03AB
     98a:	01 90       	ld	r0, Z+
     98c:	f0 81       	ld	r31, Z
     98e:	e0 2d       	mov	r30, r0
     990:	94 e0       	ldi	r25, 0x04	; 4
     992:	89 9f       	mul	r24, r25
     994:	e0 0d       	add	r30, r0
     996:	f1 1d       	adc	r31, r1
     998:	11 24       	eor	r1, r1
     99a:	60 81       	ld	r22, Z
     99c:	71 81       	ldd	r23, Z+1	; 0x01
     99e:	82 81       	ldd	r24, Z+2	; 0x02
     9a0:	93 81       	ldd	r25, Z+3	; 0x03
     9a2:	56 dc       	rcall	.-1876   	; 0x250 <set_PWM>
     9a4:	04 c0       	rjmp	.+8      	; 0x9ae <playerSM+0x17c>
			}
			else {
				set_PWM(0.0);
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	cb 01       	movw	r24, r22
     9ac:	51 dc       	rcall	.-1886   	; 0x250 <set_PWM>
			}
			mConvert(k, count);
     9ae:	60 91 a6 03 	lds	r22, 0x03A6
     9b2:	80 91 a9 03 	lds	r24, 0x03A9
     9b6:	88 ce       	rjmp	.-752    	; 0x6c8 <mConvert>
			break;
     9b8:	08 95       	ret
		case pause:
			set_PWM(0.0);
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	cb 01       	movw	r24, r22
     9c0:	47 dc       	rcall	.-1906   	; 0x250 <set_PWM>
			mConvert(k, count);
     9c2:	60 91 a6 03 	lds	r22, 0x03A6
     9c6:	80 91 a9 03 	lds	r24, 0x03A9
     9ca:	7e ce       	rjmp	.-772    	; 0x6c8 <mConvert>
     9cc:	08 95       	ret

000009ce <clearDBs>:
			break;
	}
	};

void clearDBs() {
	dbRed[0] = 0x00;
     9ce:	10 92 16 01 	sts	0x0116, r1
	dbGreen[0] = 0x00;
     9d2:	10 92 12 01 	sts	0x0112, r1
	dbBlue[0] = 0x00;
     9d6:	10 92 0e 01 	sts	0x010E, r1
     9da:	08 95       	ret

000009dc <inputSM>:
}
enum input {initi, waiti, playi} inputState;
unsigned char previousButton = 0;
unsigned char joyToggle = 0;
unsigned char joyIn;
void inputSM() {
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
	unsigned char temp = 0x07 & ~PINA;
     9e0:	c0 b1       	in	r28, 0x00	; 0
	switch(inputState) {
     9e2:	80 91 b7 03 	lds	r24, 0x03B7
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	41 f0       	breq	.+16     	; 0x9fa <inputSM+0x1e>
     9ea:	18 f0       	brcs	.+6      	; 0x9f2 <inputSM+0x16>
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	71 f0       	breq	.+28     	; 0xa0c <inputSM+0x30>
     9f0:	c1 c0       	rjmp	.+386    	; 0xb74 <inputSM+0x198>
		case initi:
			inputState = waiti;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	80 93 b7 03 	sts	0x03B7, r24
			break;
     9f8:	eb c2       	rjmp	.+1494   	; 0xfd0 <inputSM+0x5f4>
		case waiti:
			if (songToggle == 1) {
     9fa:	80 91 a7 03 	lds	r24, 0x03A7
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	09 f0       	breq	.+2      	; 0xa04 <inputSM+0x28>
     a02:	e6 c2       	rjmp	.+1484   	; 0xfd0 <inputSM+0x5f4>
				inputState = playi;
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	80 93 b7 03 	sts	0x03B7, r24
     a0a:	c6 c0       	rjmp	.+396    	; 0xb98 <inputSM+0x1bc>
			else {
				inputState = waiti;
			}
			break;
		case playi:
			if (songToggle == 0) {
     a0c:	80 91 a7 03 	lds	r24, 0x03A7
     a10:	81 11       	cpse	r24, r1
     a12:	c2 c0       	rjmp	.+388    	; 0xb98 <inputSM+0x1bc>
				if (k == 0) {
     a14:	80 91 a9 03 	lds	r24, 0x03A9
     a18:	81 11       	cpse	r24, r1
     a1a:	51 c0       	rjmp	.+162    	; 0xabe <inputSM+0xe2>
					if (newScore > eeprom_read_word(0x00)) {
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	b8 d5       	rcall	.+2928   	; 0x1592 <__eerd_word_m1284>
     a22:	60 91 ac 03 	lds	r22, 0x03AC
     a26:	70 91 ad 03 	lds	r23, 0x03AD
     a2a:	86 17       	cp	r24, r22
     a2c:	97 07       	cpc	r25, r23
     a2e:	c0 f4       	brcc	.+48     	; 0xa60 <inputSM+0x84>
						eeprom_update_word(0x00, newScore);
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	b3 d5       	rcall	.+2918   	; 0x159c <__eeupd_word_m1284>
						LCD_DisplayString(1, "New High Score");
     a36:	61 e6       	ldi	r22, 0x61	; 97
     a38:	73 e0       	ldi	r23, 0x03	; 3
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	f5 d3       	rcall	.+2026   	; 0x1228 <LCD_DisplayString>
						lcdWrite(21, newScore);
     a3e:	60 91 ac 03 	lds	r22, 0x03AC
     a42:	70 91 ad 03 	lds	r23, 0x03AD
     a46:	85 e1       	ldi	r24, 0x15	; 21
     a48:	b9 dc       	rcall	.-1678   	; 0x3bc <lcdWrite>
						LCD_Cursor(17);
     a4a:	81 e1       	ldi	r24, 0x11	; 17
     a4c:	c0 d3       	rcall	.+1920   	; 0x11ce <LCD_Cursor>
						LCD_WriteData(0);
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	c5 d3       	rcall	.+1930   	; 0x11de <LCD_WriteData>
						LCD_Cursor(32);
     a54:	80 e2       	ldi	r24, 0x20	; 32
     a56:	bb d3       	rcall	.+1910   	; 0x11ce <LCD_Cursor>
						LCD_WriteData(0);
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	c0 d3       	rcall	.+1920   	; 0x11de <LCD_WriteData>
     a5e:	87 c0       	rjmp	.+270    	; 0xb6e <inputSM+0x192>
					}
					else {
						LCD_DisplayString(1, "High Score ");
     a60:	60 e7       	ldi	r22, 0x70	; 112
     a62:	73 e0       	ldi	r23, 0x03	; 3
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	e0 d3       	rcall	.+1984   	; 0x1228 <LCD_DisplayString>
						lcdWrite(12, eeprom_read_word(0x00));
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	92 d5       	rcall	.+2852   	; 0x1592 <__eerd_word_m1284>
     a6e:	bc 01       	movw	r22, r24
     a70:	8c e0       	ldi	r24, 0x0C	; 12
     a72:	a4 dc       	rcall	.-1720   	; 0x3bc <lcdWrite>
						LCD_Cursor(17);
     a74:	81 e1       	ldi	r24, 0x11	; 17
     a76:	ab d3       	rcall	.+1878   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('Y');
     a78:	89 e5       	ldi	r24, 0x59	; 89
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	b0 d3       	rcall	.+1888   	; 0x11de <LCD_WriteData>
						LCD_Cursor(18);
     a7e:	82 e1       	ldi	r24, 0x12	; 18
     a80:	a6 d3       	rcall	.+1868   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('o');
     a82:	8f e6       	ldi	r24, 0x6F	; 111
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	ab d3       	rcall	.+1878   	; 0x11de <LCD_WriteData>
						LCD_Cursor(19);
     a88:	83 e1       	ldi	r24, 0x13	; 19
     a8a:	a1 d3       	rcall	.+1858   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('u');
     a8c:	85 e7       	ldi	r24, 0x75	; 117
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a6 d3       	rcall	.+1868   	; 0x11de <LCD_WriteData>
						LCD_Cursor(20);
     a92:	84 e1       	ldi	r24, 0x14	; 20
     a94:	9c d3       	rcall	.+1848   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('r');
     a96:	82 e7       	ldi	r24, 0x72	; 114
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a1 d3       	rcall	.+1858   	; 0x11de <LCD_WriteData>
						LCD_Cursor(21);
     a9c:	85 e1       	ldi	r24, 0x15	; 21
     a9e:	97 d3       	rcall	.+1838   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('s');
     aa0:	83 e7       	ldi	r24, 0x73	; 115
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	9c d3       	rcall	.+1848   	; 0x11de <LCD_WriteData>
						LCD_Cursor(22);
     aa6:	86 e1       	ldi	r24, 0x16	; 22
     aa8:	92 d3       	rcall	.+1828   	; 0x11ce <LCD_Cursor>
						LCD_WriteData(' ');
     aaa:	80 e2       	ldi	r24, 0x20	; 32
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	97 d3       	rcall	.+1838   	; 0x11de <LCD_WriteData>
						lcdWrite(28, newScore);
     ab0:	60 91 ac 03 	lds	r22, 0x03AC
     ab4:	70 91 ad 03 	lds	r23, 0x03AD
     ab8:	8c e1       	ldi	r24, 0x1C	; 28
     aba:	80 dc       	rcall	.-1792   	; 0x3bc <lcdWrite>
     abc:	58 c0       	rjmp	.+176    	; 0xb6e <inputSM+0x192>
					}
				}
				else if (k == 1) {
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	09 f0       	breq	.+2      	; 0xac4 <inputSM+0xe8>
     ac2:	55 c0       	rjmp	.+170    	; 0xb6e <inputSM+0x192>
					if (newScore > eeprom_read_word(0x0F)) {
     ac4:	8f e0       	ldi	r24, 0x0F	; 15
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	64 d5       	rcall	.+2760   	; 0x1592 <__eerd_word_m1284>
     aca:	60 91 ac 03 	lds	r22, 0x03AC
     ace:	70 91 ad 03 	lds	r23, 0x03AD
     ad2:	86 17       	cp	r24, r22
     ad4:	97 07       	cpc	r25, r23
     ad6:	c0 f4       	brcc	.+48     	; 0xb08 <inputSM+0x12c>
						eeprom_update_word(0x0F, newScore);
     ad8:	8f e0       	ldi	r24, 0x0F	; 15
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	5f d5       	rcall	.+2750   	; 0x159c <__eeupd_word_m1284>
						LCD_DisplayString(1, "New High Score");
     ade:	61 e6       	ldi	r22, 0x61	; 97
     ae0:	73 e0       	ldi	r23, 0x03	; 3
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	a1 d3       	rcall	.+1858   	; 0x1228 <LCD_DisplayString>
						lcdWrite(21, newScore);
     ae6:	60 91 ac 03 	lds	r22, 0x03AC
     aea:	70 91 ad 03 	lds	r23, 0x03AD
     aee:	85 e1       	ldi	r24, 0x15	; 21
     af0:	65 dc       	rcall	.-1846   	; 0x3bc <lcdWrite>
						LCD_Cursor(17);
     af2:	81 e1       	ldi	r24, 0x11	; 17
     af4:	6c d3       	rcall	.+1752   	; 0x11ce <LCD_Cursor>
						LCD_WriteData(0);
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	71 d3       	rcall	.+1762   	; 0x11de <LCD_WriteData>
						LCD_Cursor(32);
     afc:	80 e2       	ldi	r24, 0x20	; 32
     afe:	67 d3       	rcall	.+1742   	; 0x11ce <LCD_Cursor>
						LCD_WriteData(0);
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	6c d3       	rcall	.+1752   	; 0x11de <LCD_WriteData>
     b06:	33 c0       	rjmp	.+102    	; 0xb6e <inputSM+0x192>
					}
					else {
						LCD_DisplayString(1, "High Score ");
     b08:	60 e7       	ldi	r22, 0x70	; 112
     b0a:	73 e0       	ldi	r23, 0x03	; 3
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	8c d3       	rcall	.+1816   	; 0x1228 <LCD_DisplayString>
						lcdWrite(12, eeprom_read_word(0x0F));
     b10:	8f e0       	ldi	r24, 0x0F	; 15
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	3e d5       	rcall	.+2684   	; 0x1592 <__eerd_word_m1284>
     b16:	bc 01       	movw	r22, r24
     b18:	8c e0       	ldi	r24, 0x0C	; 12
     b1a:	50 dc       	rcall	.-1888   	; 0x3bc <lcdWrite>
						LCD_Cursor(17);
     b1c:	81 e1       	ldi	r24, 0x11	; 17
     b1e:	57 d3       	rcall	.+1710   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('Y');
     b20:	89 e5       	ldi	r24, 0x59	; 89
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	5c d3       	rcall	.+1720   	; 0x11de <LCD_WriteData>
						LCD_Cursor(18);
     b26:	82 e1       	ldi	r24, 0x12	; 18
     b28:	52 d3       	rcall	.+1700   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('o');
     b2a:	8f e6       	ldi	r24, 0x6F	; 111
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	57 d3       	rcall	.+1710   	; 0x11de <LCD_WriteData>
						LCD_Cursor(19);
     b30:	83 e1       	ldi	r24, 0x13	; 19
     b32:	4d d3       	rcall	.+1690   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('u');
     b34:	85 e7       	ldi	r24, 0x75	; 117
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	52 d3       	rcall	.+1700   	; 0x11de <LCD_WriteData>
						LCD_Cursor(20);
     b3a:	84 e1       	ldi	r24, 0x14	; 20
     b3c:	48 d3       	rcall	.+1680   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('r');
     b3e:	82 e7       	ldi	r24, 0x72	; 114
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	4d d3       	rcall	.+1690   	; 0x11de <LCD_WriteData>
						LCD_Cursor(21);
     b44:	85 e1       	ldi	r24, 0x15	; 21
     b46:	43 d3       	rcall	.+1670   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('\'');
     b48:	87 e2       	ldi	r24, 0x27	; 39
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	48 d3       	rcall	.+1680   	; 0x11de <LCD_WriteData>
						LCD_Cursor(22);
     b4e:	86 e1       	ldi	r24, 0x16	; 22
     b50:	3e d3       	rcall	.+1660   	; 0x11ce <LCD_Cursor>
						LCD_WriteData('s');
     b52:	83 e7       	ldi	r24, 0x73	; 115
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	43 d3       	rcall	.+1670   	; 0x11de <LCD_WriteData>
						LCD_Cursor(23);
     b58:	87 e1       	ldi	r24, 0x17	; 23
     b5a:	39 d3       	rcall	.+1650   	; 0x11ce <LCD_Cursor>
						LCD_WriteData(' ');
     b5c:	80 e2       	ldi	r24, 0x20	; 32
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	3e d3       	rcall	.+1660   	; 0x11de <LCD_WriteData>
						lcdWrite(28, newScore);
     b62:	60 91 ac 03 	lds	r22, 0x03AC
     b66:	70 91 ad 03 	lds	r23, 0x03AD
     b6a:	8c e1       	ldi	r24, 0x1C	; 28
     b6c:	27 dc       	rcall	.-1970   	; 0x3bc <lcdWrite>
					}
				}
				inputState = initi;
     b6e:	10 92 b7 03 	sts	0x03B7, r1
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <inputSM+0x1a2>
			else {
				inputState = playi;
			}
			break;
	}
	switch(inputState) {
     b74:	88 23       	and	r24, r24
     b76:	19 f0       	breq	.+6      	; 0xb7e <inputSM+0x1a2>
     b78:	82 30       	cpi	r24, 0x02	; 2
     b7a:	71 f0       	breq	.+28     	; 0xb98 <inputSM+0x1bc>
     b7c:	29 c2       	rjmp	.+1106   	; 0xfd0 <inputSM+0x5f4>
		case initi:
			previousButton = 0;
     b7e:	10 92 a2 03 	sts	0x03A2, r1
			newScore = 0;
     b82:	10 92 ad 03 	sts	0x03AD, r1
     b86:	10 92 ac 03 	sts	0x03AC, r1
			joyToggle = 0;
     b8a:	10 92 a1 03 	sts	0x03A1, r1
			notePlay = 0;
     b8e:	10 92 a5 03 	sts	0x03A5, r1
			starPower = 0;
     b92:	10 92 a3 03 	sts	0x03A3, r1
		break;
     b96:	1c c2       	rjmp	.+1080   	; 0xfd0 <inputSM+0x5f4>
		case waiti:
		break;
		case playi: //add a red blue button/note later
			joyIn = joyInput();
     b98:	f4 db       	rcall	.-2072   	; 0x382 <joyInput>
     b9a:	80 93 b6 03 	sts	0x03B6, r24
			if (joyIn == 0x01 | joyIn == 0x02 | k == 1) {
     b9e:	2f ef       	ldi	r18, 0xFF	; 255
     ba0:	28 0f       	add	r18, r24
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	08 f0       	brcs	.+2      	; 0xbaa <inputSM+0x1ce>
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	91 11       	cpse	r25, r1
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <inputSM+0x1e2>
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	20 91 a9 03 	lds	r18, 0x03A9
     bb4:	21 30       	cpi	r18, 0x01	; 1
     bb6:	09 f0       	breq	.+2      	; 0xbba <inputSM+0x1de>
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	99 23       	and	r25, r25
     bbc:	21 f0       	breq	.+8      	; 0xbc6 <inputSM+0x1ea>
				joyToggle = 1;
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	90 93 a1 03 	sts	0x03A1, r25
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <inputSM+0x1ee>
			}
			else {
				joyToggle = 0;
     bc6:	10 92 a1 03 	sts	0x03A1, r1
			}
			if (joyIn == 0x04 | joyIn == 0x08) {
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	88 30       	cpi	r24, 0x08	; 8
     bce:	09 f0       	breq	.+2      	; 0xbd2 <inputSM+0x1f6>
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	91 11       	cpse	r25, r1
     bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <inputSM+0x206>
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	84 30       	cpi	r24, 0x04	; 4
     bda:	09 f0       	breq	.+2      	; 0xbde <inputSM+0x202>
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	99 23       	and	r25, r25
     be0:	b1 f0       	breq	.+44     	; 0xc0e <inputSM+0x232>
				starPower = 1;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 a3 03 	sts	0x03A3, r24
				dRed[2]  =  0x60;
     be8:	80 e6       	ldi	r24, 0x60	; 96
     bea:	80 93 24 01 	sts	0x0124, r24
				dbRed[2] =  0x60;
     bee:	80 93 18 01 	sts	0x0118, r24
				dGreen[3] = 0x18;
     bf2:	88 e1       	ldi	r24, 0x18	; 24
     bf4:	80 93 21 01 	sts	0x0121, r24
				dbGreen[3]= 0x18;
     bf8:	80 93 15 01 	sts	0x0115, r24
				dBlue[2]  = 0x06;
     bfc:	86 e0       	ldi	r24, 0x06	; 6
     bfe:	80 93 1c 01 	sts	0x011C, r24
				dbBlue[2] = 0x06;
     c02:	80 93 10 01 	sts	0x0110, r24
				dBlue[1]  = 0x06;
     c06:	80 93 1b 01 	sts	0x011B, r24
				dbBlue[1] = 0x06;
     c0a:	80 93 0f 01 	sts	0x010F, r24
			}
			if (starPower == 0) {
     c0e:	80 91 a3 03 	lds	r24, 0x03A3
     c12:	81 11       	cpse	r24, r1
     c14:	10 c0       	rjmp	.+32     	; 0xc36 <inputSM+0x25a>
				dRed[2]  =  0x00;
     c16:	10 92 24 01 	sts	0x0124, r1
				dbRed[2] =  0x00;
     c1a:	10 92 18 01 	sts	0x0118, r1
				dGreen[3] = 0x00;
     c1e:	10 92 21 01 	sts	0x0121, r1
				dbGreen[3]= 0x00;
     c22:	10 92 15 01 	sts	0x0115, r1
				dBlue[2]  = 0x00;
     c26:	10 92 1c 01 	sts	0x011C, r1
				dbBlue[2] = 0x00;
     c2a:	10 92 10 01 	sts	0x0110, r1
				dBlue[1]  = 0x00;
     c2e:	10 92 1b 01 	sts	0x011B, r1
				dbBlue[1] = 0x00;
     c32:	10 92 0f 01 	sts	0x010F, r1
enum input {initi, waiti, playi} inputState;
unsigned char previousButton = 0;
unsigned char joyToggle = 0;
unsigned char joyIn;
void inputSM() {
	unsigned char temp = 0x07 & ~PINA;
     c36:	8c 2f       	mov	r24, r28
     c38:	80 95       	com	r24
     c3a:	87 70       	andi	r24, 0x07	; 7
				dBlue[2]  = 0x00;
				dbBlue[2] = 0x00;
				dBlue[1]  = 0x00;
				dbBlue[1] = 0x00;
			}
			if (temp == 0x04) {
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	09 f0       	breq	.+2      	; 0xc42 <inputSM+0x266>
     c40:	3d c0       	rjmp	.+122    	; 0xcbc <inputSM+0x2e0>
				if (previousButton != 0x04) {clearDBs();}
     c42:	80 91 a2 03 	lds	r24, 0x03A2
     c46:	84 30       	cpi	r24, 0x04	; 4
     c48:	09 f0       	breq	.+2      	; 0xc4c <inputSM+0x270>
     c4a:	c1 de       	rcall	.-638    	; 0x9ce <clearDBs>
				//red button
				dbRed[0] = 0x01;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	80 93 16 01 	sts	0x0116, r24
				previousButton = 0x04;
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	80 93 a2 03 	sts	0x03A2, r24
				double check = noteOn(k, count);
     c58:	60 91 a6 03 	lds	r22, 0x03A6
     c5c:	80 91 a9 03 	lds	r24, 0x03A9
     c60:	dd dc       	rcall	.-1606   	; 0x61c <noteOn>
				if (check == E & joyToggle) {newScore = newScore + 10; if (starPower == 1) {newScore += 10;} notePlay = 1;}
     c62:	c1 e0       	ldi	r28, 0x01	; 1
     c64:	d0 e0       	ldi	r29, 0x00	; 0
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 ed       	ldi	r19, 0xD0	; 208
     c6a:	44 e2       	ldi	r20, 0x24	; 36
     c6c:	54 e4       	ldi	r21, 0x44	; 68
     c6e:	09 d3       	rcall	.+1554   	; 0x1282 <__cmpsf2>
     c70:	88 23       	and	r24, r24
     c72:	11 f0       	breq	.+4      	; 0xc78 <inputSM+0x29c>
     c74:	c0 e0       	ldi	r28, 0x00	; 0
     c76:	d0 e0       	ldi	r29, 0x00	; 0
     c78:	80 91 a1 03 	lds	r24, 0x03A1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	c8 23       	and	r28, r24
     c80:	d9 23       	and	r29, r25
     c82:	cd 2b       	or	r28, r29
     c84:	c1 f0       	breq	.+48     	; 0xcb6 <inputSM+0x2da>
     c86:	80 91 ac 03 	lds	r24, 0x03AC
     c8a:	90 91 ad 03 	lds	r25, 0x03AD
     c8e:	9c 01       	movw	r18, r24
     c90:	26 5f       	subi	r18, 0xF6	; 246
     c92:	3f 4f       	sbci	r19, 0xFF	; 255
     c94:	30 93 ad 03 	sts	0x03AD, r19
     c98:	20 93 ac 03 	sts	0x03AC, r18
     c9c:	20 91 a3 03 	lds	r18, 0x03A3
     ca0:	21 30       	cpi	r18, 0x01	; 1
     ca2:	29 f4       	brne	.+10     	; 0xcae <inputSM+0x2d2>
     ca4:	44 96       	adiw	r24, 0x14	; 20
     ca6:	90 93 ad 03 	sts	0x03AD, r25
     caa:	80 93 ac 03 	sts	0x03AC, r24
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	80 93 a5 03 	sts	0x03A5, r24
     cb4:	8d c1       	rjmp	.+794    	; 0xfd0 <inputSM+0x5f4>
				else {notePlay = 0;}
     cb6:	10 92 a5 03 	sts	0x03A5, r1
     cba:	8a c1       	rjmp	.+788    	; 0xfd0 <inputSM+0x5f4>
			}
			else if (temp == 0x02) {
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <inputSM+0x2e6>
     cc0:	3d c0       	rjmp	.+122    	; 0xd3c <inputSM+0x360>
				if (previousButton != 0x02) {clearDBs();}
     cc2:	80 91 a2 03 	lds	r24, 0x03A2
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	09 f0       	breq	.+2      	; 0xccc <inputSM+0x2f0>
     cca:	81 de       	rcall	.-766    	; 0x9ce <clearDBs>
				//green button
				dbGreen[0] = 0x01;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 12 01 	sts	0x0112, r24
				previousButton = 0x02;
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	80 93 a2 03 	sts	0x03A2, r24
				double check = noteOn(k, count);
     cd8:	60 91 a6 03 	lds	r22, 0x03A6
     cdc:	80 91 a9 03 	lds	r24, 0x03A9
     ce0:	9d dc       	rcall	.-1734   	; 0x61c <noteOn>
				if (check == G & joyToggle) {newScore = newScore + 10; if (starPower == 1) {newScore += 10;}notePlay = 1;}
     ce2:	c1 e0       	ldi	r28, 0x01	; 1
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
     ce6:	2c e5       	ldi	r18, 0x5C	; 92
     ce8:	3f ef       	ldi	r19, 0xFF	; 255
     cea:	43 e4       	ldi	r20, 0x43	; 67
     cec:	54 e4       	ldi	r21, 0x44	; 68
     cee:	c9 d2       	rcall	.+1426   	; 0x1282 <__cmpsf2>
     cf0:	88 23       	and	r24, r24
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <inputSM+0x31c>
     cf4:	c0 e0       	ldi	r28, 0x00	; 0
     cf6:	d0 e0       	ldi	r29, 0x00	; 0
     cf8:	80 91 a1 03 	lds	r24, 0x03A1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	c8 23       	and	r28, r24
     d00:	d9 23       	and	r29, r25
     d02:	cd 2b       	or	r28, r29
     d04:	c1 f0       	breq	.+48     	; 0xd36 <inputSM+0x35a>
     d06:	80 91 ac 03 	lds	r24, 0x03AC
     d0a:	90 91 ad 03 	lds	r25, 0x03AD
     d0e:	9c 01       	movw	r18, r24
     d10:	26 5f       	subi	r18, 0xF6	; 246
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	30 93 ad 03 	sts	0x03AD, r19
     d18:	20 93 ac 03 	sts	0x03AC, r18
     d1c:	20 91 a3 03 	lds	r18, 0x03A3
     d20:	21 30       	cpi	r18, 0x01	; 1
     d22:	29 f4       	brne	.+10     	; 0xd2e <inputSM+0x352>
     d24:	44 96       	adiw	r24, 0x14	; 20
     d26:	90 93 ad 03 	sts	0x03AD, r25
     d2a:	80 93 ac 03 	sts	0x03AC, r24
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 a5 03 	sts	0x03A5, r24
     d34:	4d c1       	rjmp	.+666    	; 0xfd0 <inputSM+0x5f4>
				else {notePlay = 0;}
     d36:	10 92 a5 03 	sts	0x03A5, r1
     d3a:	4a c1       	rjmp	.+660    	; 0xfd0 <inputSM+0x5f4>
			}
			else if (temp == 0x01) {
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	09 f0       	breq	.+2      	; 0xd42 <inputSM+0x366>
     d40:	3c c0       	rjmp	.+120    	; 0xdba <inputSM+0x3de>
				if (previousButton != 0x01) {clearDBs();}
     d42:	80 91 a2 03 	lds	r24, 0x03A2
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	09 f0       	breq	.+2      	; 0xd4c <inputSM+0x370>
     d4a:	41 de       	rcall	.-894    	; 0x9ce <clearDBs>
				//blue button
				dbBlue[0] = 0x01;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	80 93 0e 01 	sts	0x010E, r24
				previousButton = 0x01;
     d52:	80 93 a2 03 	sts	0x03A2, r24
				double check = noteOn(k, count);
     d56:	60 91 a6 03 	lds	r22, 0x03A6
     d5a:	80 91 a9 03 	lds	r24, 0x03A9
     d5e:	5e dc       	rcall	.-1860   	; 0x61c <noteOn>
				if (check == F & joyToggle) {newScore = newScore + 10; if (starPower == 1) {newScore += 10;}notePlay = 1;}
     d60:	c1 e0       	ldi	r28, 0x01	; 1
     d62:	d0 e0       	ldi	r29, 0x00	; 0
     d64:	21 e7       	ldi	r18, 0x71	; 113
     d66:	3d e9       	ldi	r19, 0x9D	; 157
     d68:	4e e2       	ldi	r20, 0x2E	; 46
     d6a:	54 e4       	ldi	r21, 0x44	; 68
     d6c:	8a d2       	rcall	.+1300   	; 0x1282 <__cmpsf2>
     d6e:	88 23       	and	r24, r24
     d70:	11 f0       	breq	.+4      	; 0xd76 <inputSM+0x39a>
     d72:	c0 e0       	ldi	r28, 0x00	; 0
     d74:	d0 e0       	ldi	r29, 0x00	; 0
     d76:	80 91 a1 03 	lds	r24, 0x03A1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	c8 23       	and	r28, r24
     d7e:	d9 23       	and	r29, r25
     d80:	cd 2b       	or	r28, r29
     d82:	c1 f0       	breq	.+48     	; 0xdb4 <inputSM+0x3d8>
     d84:	80 91 ac 03 	lds	r24, 0x03AC
     d88:	90 91 ad 03 	lds	r25, 0x03AD
     d8c:	9c 01       	movw	r18, r24
     d8e:	26 5f       	subi	r18, 0xF6	; 246
     d90:	3f 4f       	sbci	r19, 0xFF	; 255
     d92:	30 93 ad 03 	sts	0x03AD, r19
     d96:	20 93 ac 03 	sts	0x03AC, r18
     d9a:	20 91 a3 03 	lds	r18, 0x03A3
     d9e:	21 30       	cpi	r18, 0x01	; 1
     da0:	29 f4       	brne	.+10     	; 0xdac <inputSM+0x3d0>
     da2:	44 96       	adiw	r24, 0x14	; 20
     da4:	90 93 ad 03 	sts	0x03AD, r25
     da8:	80 93 ac 03 	sts	0x03AC, r24
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 a5 03 	sts	0x03A5, r24
     db2:	0e c1       	rjmp	.+540    	; 0xfd0 <inputSM+0x5f4>
				else {notePlay = 0;}
     db4:	10 92 a5 03 	sts	0x03A5, r1
     db8:	0b c1       	rjmp	.+534    	; 0xfd0 <inputSM+0x5f4>
			}
			else if (temp == 0x03) {
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <inputSM+0x3e4>
     dbe:	3f c0       	rjmp	.+126    	; 0xe3e <inputSM+0x462>
				if (previousButton != 0x03) {clearDBs();}
     dc0:	80 91 a2 03 	lds	r24, 0x03A2
     dc4:	83 30       	cpi	r24, 0x03	; 3
     dc6:	09 f0       	breq	.+2      	; 0xdca <inputSM+0x3ee>
     dc8:	02 de       	rcall	.-1020   	; 0x9ce <clearDBs>
				//green blue button
				dbGreen[0] = 0x01;dbBlue[0] = 0x01;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	80 93 12 01 	sts	0x0112, r24
     dd0:	80 93 0e 01 	sts	0x010E, r24
				previousButton = 0x03;
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	80 93 a2 03 	sts	0x03A2, r24
				double check = noteOn(k, count);
     dda:	60 91 a6 03 	lds	r22, 0x03A6
     dde:	80 91 a9 03 	lds	r24, 0x03A9
     de2:	1c dc       	rcall	.-1992   	; 0x61c <noteOn>
				if (check == D & joyToggle) {newScore = newScore + 10; if (starPower == 1) {newScore += 10;}notePlay = 1;}
     de4:	c1 e0       	ldi	r28, 0x01	; 1
     de6:	d0 e0       	ldi	r29, 0x00	; 0
     de8:	2f e1       	ldi	r18, 0x1F	; 31
     dea:	35 ed       	ldi	r19, 0xD5	; 213
     dec:	42 e1       	ldi	r20, 0x12	; 18
     dee:	54 e4       	ldi	r21, 0x44	; 68
     df0:	48 d2       	rcall	.+1168   	; 0x1282 <__cmpsf2>
     df2:	88 23       	and	r24, r24
     df4:	11 f0       	breq	.+4      	; 0xdfa <inputSM+0x41e>
     df6:	c0 e0       	ldi	r28, 0x00	; 0
     df8:	d0 e0       	ldi	r29, 0x00	; 0
     dfa:	80 91 a1 03 	lds	r24, 0x03A1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	c8 23       	and	r28, r24
     e02:	d9 23       	and	r29, r25
     e04:	cd 2b       	or	r28, r29
     e06:	c1 f0       	breq	.+48     	; 0xe38 <inputSM+0x45c>
     e08:	80 91 ac 03 	lds	r24, 0x03AC
     e0c:	90 91 ad 03 	lds	r25, 0x03AD
     e10:	9c 01       	movw	r18, r24
     e12:	26 5f       	subi	r18, 0xF6	; 246
     e14:	3f 4f       	sbci	r19, 0xFF	; 255
     e16:	30 93 ad 03 	sts	0x03AD, r19
     e1a:	20 93 ac 03 	sts	0x03AC, r18
     e1e:	20 91 a3 03 	lds	r18, 0x03A3
     e22:	21 30       	cpi	r18, 0x01	; 1
     e24:	29 f4       	brne	.+10     	; 0xe30 <inputSM+0x454>
     e26:	44 96       	adiw	r24, 0x14	; 20
     e28:	90 93 ad 03 	sts	0x03AD, r25
     e2c:	80 93 ac 03 	sts	0x03AC, r24
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	80 93 a5 03 	sts	0x03A5, r24
     e36:	cc c0       	rjmp	.+408    	; 0xfd0 <inputSM+0x5f4>
				else {notePlay = 0;}
     e38:	10 92 a5 03 	sts	0x03A5, r1
     e3c:	c9 c0       	rjmp	.+402    	; 0xfd0 <inputSM+0x5f4>
			}
			else if (temp == 0x06) {
     e3e:	86 30       	cpi	r24, 0x06	; 6
     e40:	09 f0       	breq	.+2      	; 0xe44 <inputSM+0x468>
     e42:	3f c0       	rjmp	.+126    	; 0xec2 <inputSM+0x4e6>
				if (previousButton != 0x06) {clearDBs();}
     e44:	80 91 a2 03 	lds	r24, 0x03A2
     e48:	86 30       	cpi	r24, 0x06	; 6
     e4a:	09 f0       	breq	.+2      	; 0xe4e <inputSM+0x472>
     e4c:	c0 dd       	rcall	.-1152   	; 0x9ce <clearDBs>
				//red green button
				dbRed[0] = 0x01;dbGreen[0] = 0x01;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 16 01 	sts	0x0116, r24
     e54:	80 93 12 01 	sts	0x0112, r24
				previousButton = 0x06;
     e58:	86 e0       	ldi	r24, 0x06	; 6
     e5a:	80 93 a2 03 	sts	0x03A2, r24
				double check = noteOn(k, count);
     e5e:	60 91 a6 03 	lds	r22, 0x03A6
     e62:	80 91 a9 03 	lds	r24, 0x03A9
     e66:	da db       	rcall	.-2124   	; 0x61c <noteOn>
				if (check == A & joyToggle) {newScore = newScore + 10; if (starPower == 1) {newScore += 10;}notePlay = 1;}
     e68:	c1 e0       	ldi	r28, 0x01	; 1
     e6a:	d0 e0       	ldi	r29, 0x00	; 0
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	4c e5       	ldi	r20, 0x5C	; 92
     e72:	54 e4       	ldi	r21, 0x44	; 68
     e74:	06 d2       	rcall	.+1036   	; 0x1282 <__cmpsf2>
     e76:	88 23       	and	r24, r24
     e78:	11 f0       	breq	.+4      	; 0xe7e <inputSM+0x4a2>
     e7a:	c0 e0       	ldi	r28, 0x00	; 0
     e7c:	d0 e0       	ldi	r29, 0x00	; 0
     e7e:	80 91 a1 03 	lds	r24, 0x03A1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	c8 23       	and	r28, r24
     e86:	d9 23       	and	r29, r25
     e88:	cd 2b       	or	r28, r29
     e8a:	c1 f0       	breq	.+48     	; 0xebc <inputSM+0x4e0>
     e8c:	80 91 ac 03 	lds	r24, 0x03AC
     e90:	90 91 ad 03 	lds	r25, 0x03AD
     e94:	9c 01       	movw	r18, r24
     e96:	26 5f       	subi	r18, 0xF6	; 246
     e98:	3f 4f       	sbci	r19, 0xFF	; 255
     e9a:	30 93 ad 03 	sts	0x03AD, r19
     e9e:	20 93 ac 03 	sts	0x03AC, r18
     ea2:	20 91 a3 03 	lds	r18, 0x03A3
     ea6:	21 30       	cpi	r18, 0x01	; 1
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <inputSM+0x4d8>
     eaa:	44 96       	adiw	r24, 0x14	; 20
     eac:	90 93 ad 03 	sts	0x03AD, r25
     eb0:	80 93 ac 03 	sts	0x03AC, r24
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	80 93 a5 03 	sts	0x03A5, r24
     eba:	8a c0       	rjmp	.+276    	; 0xfd0 <inputSM+0x5f4>
				else {notePlay = 0;}
     ebc:	10 92 a5 03 	sts	0x03A5, r1
     ec0:	87 c0       	rjmp	.+270    	; 0xfd0 <inputSM+0x5f4>
			}
			else if (temp == 0x05) {
     ec2:	85 30       	cpi	r24, 0x05	; 5
     ec4:	09 f0       	breq	.+2      	; 0xec8 <inputSM+0x4ec>
     ec6:	3f c0       	rjmp	.+126    	; 0xf46 <inputSM+0x56a>
				if (previousButton != 0x05) {clearDBs();}
     ec8:	80 91 a2 03 	lds	r24, 0x03A2
     ecc:	85 30       	cpi	r24, 0x05	; 5
     ece:	09 f0       	breq	.+2      	; 0xed2 <inputSM+0x4f6>
     ed0:	7e dd       	rcall	.-1284   	; 0x9ce <clearDBs>
				//red blue button
				dbRed[0] = 0x01;dbBlue[0] = 0x01;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	80 93 16 01 	sts	0x0116, r24
     ed8:	80 93 0e 01 	sts	0x010E, r24
				previousButton = 0x05;
     edc:	85 e0       	ldi	r24, 0x05	; 5
     ede:	80 93 a2 03 	sts	0x03A2, r24
				double check = noteOn(k, count);
     ee2:	60 91 a6 03 	lds	r22, 0x03A6
     ee6:	80 91 a9 03 	lds	r24, 0x03A9
     eea:	98 db       	rcall	.-2256   	; 0x61c <noteOn>
				if (check == C & joyToggle) {newScore = newScore + 10; if (starPower == 1) {newScore += 10;}notePlay = 1;}
     eec:	c1 e0       	ldi	r28, 0x01	; 1
     eee:	d0 e0       	ldi	r29, 0x00	; 0
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 ed       	ldi	r19, 0xD0	; 208
     ef4:	42 e0       	ldi	r20, 0x02	; 2
     ef6:	54 e4       	ldi	r21, 0x44	; 68
     ef8:	c4 d1       	rcall	.+904    	; 0x1282 <__cmpsf2>
     efa:	88 23       	and	r24, r24
     efc:	11 f0       	breq	.+4      	; 0xf02 <inputSM+0x526>
     efe:	c0 e0       	ldi	r28, 0x00	; 0
     f00:	d0 e0       	ldi	r29, 0x00	; 0
     f02:	80 91 a1 03 	lds	r24, 0x03A1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	c8 23       	and	r28, r24
     f0a:	d9 23       	and	r29, r25
     f0c:	cd 2b       	or	r28, r29
     f0e:	c1 f0       	breq	.+48     	; 0xf40 <inputSM+0x564>
     f10:	80 91 ac 03 	lds	r24, 0x03AC
     f14:	90 91 ad 03 	lds	r25, 0x03AD
     f18:	9c 01       	movw	r18, r24
     f1a:	26 5f       	subi	r18, 0xF6	; 246
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	30 93 ad 03 	sts	0x03AD, r19
     f22:	20 93 ac 03 	sts	0x03AC, r18
     f26:	20 91 a3 03 	lds	r18, 0x03A3
     f2a:	21 30       	cpi	r18, 0x01	; 1
     f2c:	29 f4       	brne	.+10     	; 0xf38 <inputSM+0x55c>
     f2e:	44 96       	adiw	r24, 0x14	; 20
     f30:	90 93 ad 03 	sts	0x03AD, r25
     f34:	80 93 ac 03 	sts	0x03AC, r24
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 a5 03 	sts	0x03A5, r24
     f3e:	48 c0       	rjmp	.+144    	; 0xfd0 <inputSM+0x5f4>
				else {notePlay = 0;}
     f40:	10 92 a5 03 	sts	0x03A5, r1
     f44:	45 c0       	rjmp	.+138    	; 0xfd0 <inputSM+0x5f4>
			}
			else if (temp == 0x07) {
     f46:	87 30       	cpi	r24, 0x07	; 7
     f48:	09 f0       	breq	.+2      	; 0xf4c <inputSM+0x570>
     f4a:	41 c0       	rjmp	.+130    	; 0xfce <inputSM+0x5f2>
				if (previousButton != 0x07) {clearDBs();}
     f4c:	80 91 a2 03 	lds	r24, 0x03A2
     f50:	87 30       	cpi	r24, 0x07	; 7
     f52:	09 f0       	breq	.+2      	; 0xf56 <inputSM+0x57a>
     f54:	3c dd       	rcall	.-1416   	; 0x9ce <clearDBs>
				//red green blue button
				dbRed[0] = 0x01;dbGreen[0] = 0x01;dbBlue[0] = 0x01;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 16 01 	sts	0x0116, r24
     f5c:	80 93 12 01 	sts	0x0112, r24
     f60:	80 93 0e 01 	sts	0x010E, r24
				previousButton = 0x07;
     f64:	87 e0       	ldi	r24, 0x07	; 7
     f66:	80 93 a2 03 	sts	0x03A2, r24
				double check = noteOn(k, count);
     f6a:	60 91 a6 03 	lds	r22, 0x03A6
     f6e:	80 91 a9 03 	lds	r24, 0x03A9
     f72:	54 db       	rcall	.-2392   	; 0x61c <noteOn>
				if (check == B & joyToggle) {newScore = newScore + 10; if (starPower == 1) {newScore += 10;}notePlay = 1;}
     f74:	c1 e0       	ldi	r28, 0x01	; 1
     f76:	d0 e0       	ldi	r29, 0x00	; 0
     f78:	24 ea       	ldi	r18, 0xA4	; 164
     f7a:	30 ef       	ldi	r19, 0xF0	; 240
     f7c:	46 ef       	ldi	r20, 0xF6	; 246
     f7e:	53 e4       	ldi	r21, 0x43	; 67
     f80:	80 d1       	rcall	.+768    	; 0x1282 <__cmpsf2>
     f82:	88 23       	and	r24, r24
     f84:	11 f0       	breq	.+4      	; 0xf8a <inputSM+0x5ae>
     f86:	c0 e0       	ldi	r28, 0x00	; 0
     f88:	d0 e0       	ldi	r29, 0x00	; 0
     f8a:	80 91 a1 03 	lds	r24, 0x03A1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	c8 23       	and	r28, r24
     f92:	d9 23       	and	r29, r25
     f94:	cd 2b       	or	r28, r29
     f96:	c1 f0       	breq	.+48     	; 0xfc8 <inputSM+0x5ec>
     f98:	80 91 ac 03 	lds	r24, 0x03AC
     f9c:	90 91 ad 03 	lds	r25, 0x03AD
     fa0:	9c 01       	movw	r18, r24
     fa2:	26 5f       	subi	r18, 0xF6	; 246
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	30 93 ad 03 	sts	0x03AD, r19
     faa:	20 93 ac 03 	sts	0x03AC, r18
     fae:	20 91 a3 03 	lds	r18, 0x03A3
     fb2:	21 30       	cpi	r18, 0x01	; 1
     fb4:	29 f4       	brne	.+10     	; 0xfc0 <inputSM+0x5e4>
     fb6:	44 96       	adiw	r24, 0x14	; 20
     fb8:	90 93 ad 03 	sts	0x03AD, r25
     fbc:	80 93 ac 03 	sts	0x03AC, r24
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	80 93 a5 03 	sts	0x03A5, r24
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <inputSM+0x5f4>
				else {notePlay = 0;}
     fc8:	10 92 a5 03 	sts	0x03A5, r1
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <inputSM+0x5f4>
			}
			else {clearDBs();}
     fce:	ff dc       	rcall	.-1538   	; 0x9ce <clearDBs>
		break;
	}
	};
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <main>:

int main(void)
{//up down to a5, left right to a6
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	00 d0       	rcall	.+0      	; 0xfdc <main+0x6>
     fdc:	00 d0       	rcall	.+0      	; 0xfde <main+0x8>
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <main+0xa>
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
     fe4:	11 b8       	out	0x01, r1	; 1
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
     fea:	84 b9       	out	0x04, r24	; 4
     fec:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
     fee:	87 b9       	out	0x07, r24	; 7
     ff0:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
     ff2:	8a b9       	out	0x0a, r24	; 10
     ff4:	1b b8       	out	0x0b, r1	; 11
	ADC_init();
     ff6:	a5 d9       	rcall	.-3254   	; 0x342 <ADC_init>
	LCD_init();
     ff8:	31 d1       	rcall	.+610    	; 0x125c <LCD_init>
	PWM_on();
     ffa:	98 d9       	rcall	.-3280   	; 0x32c <PWM_on>

	if(eeprom_read_word( (uint16_t *) 0x00) == 0xFFFF) {
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	c8 d2       	rcall	.+1424   	; 0x1592 <__eerd_word_m1284>
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	29 f4       	brne	.+10     	; 0x1010 <main+0x3a>
		eeprom_update_word( (uint16_t*) 0x00, 0);
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	c6 d2       	rcall	.+1420   	; 0x159c <__eeupd_word_m1284>
	}
	if (eeprom_read_word( (uint16_t *) 0x0F) == 0xFFFF) {
    1010:	8f e0       	ldi	r24, 0x0F	; 15
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	be d2       	rcall	.+1404   	; 0x1592 <__eerd_word_m1284>
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	29 f4       	brne	.+10     	; 0x1024 <main+0x4e>
		eeprom_update_word( (uint16_t*) 0x0F, 0);
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	8f e0       	ldi	r24, 0x0F	; 15
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	bc d2       	rcall	.+1400   	; 0x159c <__eeupd_word_m1284>
	unsigned long int SMTick2_period = SMTick2_calc/GCD;
	unsigned long int SMTick3_period = SMTick3_calc/GCD;

	//Declare an array of tasks
	static task task1, task2, task3;
	task *tasks[] = { &task1, &task2, &task3};
    1024:	86 e0       	ldi	r24, 0x06	; 6
    1026:	ec e3       	ldi	r30, 0x3C	; 60
    1028:	f3 e0       	ldi	r31, 0x03	; 3
    102a:	de 01       	movw	r26, r28
    102c:	11 96       	adiw	r26, 0x01	; 1
    102e:	01 90       	ld	r0, Z+
    1030:	0d 92       	st	X+, r0
    1032:	8a 95       	dec	r24
    1034:	e1 f7       	brne	.-8      	; 0x102e <main+0x58>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = init;//Task initial state.
    1036:	10 92 92 03 	sts	0x0392, r1
	task1.period = SMTick1_period;//Task Period.
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a0 e0       	ldi	r26, 0x00	; 0
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	80 93 93 03 	sts	0x0393, r24
    1046:	90 93 94 03 	sts	0x0394, r25
    104a:	a0 93 95 03 	sts	0x0395, r26
    104e:	b0 93 96 03 	sts	0x0396, r27
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
    1052:	80 93 97 03 	sts	0x0397, r24
    1056:	90 93 98 03 	sts	0x0398, r25
    105a:	a0 93 99 03 	sts	0x0399, r26
    105e:	b0 93 9a 03 	sts	0x039A, r27
	task1.TickFct = &menuSM;//Function pointer for the tick.
    1062:	8d e1       	ldi	r24, 0x1D	; 29
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	90 93 9c 03 	sts	0x039C, r25
    106a:	80 93 9b 03 	sts	0x039B, r24

	// Task 2
	task2.state = init2;//Task initial state.
    106e:	10 92 87 03 	sts	0x0387, r1
	task2.period = SMTick2_period;//Task Period.
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	80 93 88 03 	sts	0x0388, r24
    107e:	90 93 89 03 	sts	0x0389, r25
    1082:	a0 93 8a 03 	sts	0x038A, r26
    1086:	b0 93 8b 03 	sts	0x038B, r27
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
    108a:	80 93 8c 03 	sts	0x038C, r24
    108e:	90 93 8d 03 	sts	0x038D, r25
    1092:	a0 93 8e 03 	sts	0x038E, r26
    1096:	b0 93 8f 03 	sts	0x038F, r27
	task2.TickFct = &playerSM;//Function pointer for the tick.
    109a:	29 e1       	ldi	r18, 0x19	; 25
    109c:	34 e0       	ldi	r19, 0x04	; 4
    109e:	30 93 91 03 	sts	0x0391, r19
    10a2:	20 93 90 03 	sts	0x0390, r18

	// Task 3
	task3.state = initi;//Task initial state.
    10a6:	10 92 7c 03 	sts	0x037C, r1
	task3.period = SMTick3_period;//Task Period.
    10aa:	80 93 7d 03 	sts	0x037D, r24
    10ae:	90 93 7e 03 	sts	0x037E, r25
    10b2:	a0 93 7f 03 	sts	0x037F, r26
    10b6:	b0 93 80 03 	sts	0x0380, r27
	task3.elapsedTime = SMTick3_period; // Task current elasped time.
    10ba:	80 93 81 03 	sts	0x0381, r24
    10be:	90 93 82 03 	sts	0x0382, r25
    10c2:	a0 93 83 03 	sts	0x0383, r26
    10c6:	b0 93 84 03 	sts	0x0384, r27
	task3.TickFct = &inputSM; // Function pointer for the tick.
    10ca:	8e ee       	ldi	r24, 0xEE	; 238
    10cc:	94 e0       	ldi	r25, 0x04	; 4
    10ce:	90 93 86 03 	sts	0x0386, r25
    10d2:	80 93 85 03 	sts	0x0385, r24
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
    10d6:	84 e6       	ldi	r24, 0x64	; 100
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	80 93 30 03 	sts	0x0330, r24
    10e2:	90 93 31 03 	sts	0x0331, r25
    10e6:	a0 93 32 03 	sts	0x0332, r26
    10ea:	b0 93 33 03 	sts	0x0333, r27
	_avr_timer_cntcurr = _avr_timer_M;
    10ee:	80 93 b0 03 	sts	0x03B0, r24
    10f2:	90 93 b1 03 	sts	0x03B1, r25
    10f6:	a0 93 b2 03 	sts	0x03B2, r26
    10fa:	b0 93 b3 03 	sts	0x03B3, r27

	// Set the timer and turn it on
	TimerSet(GCD);
	TimerOn();
    10fe:	48 d8       	rcall	.-3952   	; 0x190 <TimerOn>
    1100:	7e 01       	movw	r14, r28
    1102:	b7 e0       	ldi	r27, 0x07	; 7
    1104:	eb 0e       	add	r14, r27
    1106:	f1 1c       	adc	r15, r1

	unsigned short i; // Scheduler for-loop iterator
	
    while(1)
    {		
		mMatrix();
    1108:	72 da       	rcall	.-2844   	; 0x5ee <mMatrix>
    110a:	fe 01       	movw	r30, r28
    110c:	31 96       	adiw	r30, 0x01	; 1
    110e:	6f 01       	movw	r12, r30

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
    1110:	d6 01       	movw	r26, r12
    1112:	0d 91       	ld	r16, X+
    1114:	1d 91       	ld	r17, X+
    1116:	6d 01       	movw	r12, r26
    1118:	f8 01       	movw	r30, r16
    111a:	45 81       	ldd	r20, Z+5	; 0x05
    111c:	56 81       	ldd	r21, Z+6	; 0x06
    111e:	67 81       	ldd	r22, Z+7	; 0x07
    1120:	70 85       	ldd	r23, Z+8	; 0x08
    1122:	81 81       	ldd	r24, Z+1	; 0x01
    1124:	92 81       	ldd	r25, Z+2	; 0x02
    1126:	a3 81       	ldd	r26, Z+3	; 0x03
    1128:	b4 81       	ldd	r27, Z+4	; 0x04
    112a:	48 17       	cp	r20, r24
    112c:	59 07       	cpc	r21, r25
    112e:	6a 07       	cpc	r22, r26
    1130:	7b 07       	cpc	r23, r27
    1132:	79 f4       	brne	.+30     	; 0x1152 <main+0x17c>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    1134:	80 81       	ld	r24, Z
    1136:	01 84       	ldd	r0, Z+9	; 0x09
    1138:	f2 85       	ldd	r31, Z+10	; 0x0a
    113a:	e0 2d       	mov	r30, r0
    113c:	99 27       	eor	r25, r25
    113e:	87 fd       	sbrc	r24, 7
    1140:	90 95       	com	r25
    1142:	09 95       	icall
    1144:	d8 01       	movw	r26, r16
    1146:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    1148:	f8 01       	movw	r30, r16
    114a:	15 82       	std	Z+5, r1	; 0x05
    114c:	16 82       	std	Z+6, r1	; 0x06
    114e:	17 82       	std	Z+7, r1	; 0x07
    1150:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
    1152:	f8 01       	movw	r30, r16
    1154:	85 81       	ldd	r24, Z+5	; 0x05
    1156:	96 81       	ldd	r25, Z+6	; 0x06
    1158:	a7 81       	ldd	r26, Z+7	; 0x07
    115a:	b0 85       	ldd	r27, Z+8	; 0x08
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	a1 1d       	adc	r26, r1
    1160:	b1 1d       	adc	r27, r1
    1162:	85 83       	std	Z+5, r24	; 0x05
    1164:	96 83       	std	Z+6, r25	; 0x06
    1166:	a7 83       	std	Z+7, r26	; 0x07
    1168:	b0 87       	std	Z+8, r27	; 0x08
    while(1)
    {		
		mMatrix();

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
    116a:	ce 14       	cp	r12, r14
    116c:	df 04       	cpc	r13, r15
    116e:	81 f6       	brne	.-96     	; 0x1110 <main+0x13a>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag) {mMatrix();}
    1170:	80 91 b4 03 	lds	r24, 0x03B4
    1174:	81 11       	cpse	r24, r1
    1176:	05 c0       	rjmp	.+10     	; 0x1182 <main+0x1ac>
    1178:	3a da       	rcall	.-2956   	; 0x5ee <mMatrix>
    117a:	80 91 b4 03 	lds	r24, 0x03B4
    117e:	88 23       	and	r24, r24
    1180:	d9 f3       	breq	.-10     	; 0x1178 <main+0x1a2>
		TimerFlag = 0;
    1182:	10 92 b4 03 	sts	0x03B4, r1

    }
    1186:	c0 cf       	rjmp	.-128    	; 0x1108 <main+0x132>

00001188 <delay_ms>:
    1188:	18 16       	cp	r1, r24
    118a:	19 06       	cpc	r1, r25
    118c:	9c f4       	brge	.+38     	; 0x11b4 <delay_ms+0x2c>
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	77 e0       	ldi	r23, 0x07	; 7
    1194:	63 e0       	ldi	r22, 0x03	; 3
    1196:	0b c0       	rjmp	.+22     	; 0x11ae <delay_ms+0x26>
    1198:	00 00       	nop
    119a:	21 50       	subi	r18, 0x01	; 1
    119c:	31 09       	sbc	r19, r1
    119e:	21 15       	cp	r18, r1
    11a0:	31 05       	cpc	r19, r1
    11a2:	d1 f7       	brne	.-12     	; 0x1198 <delay_ms+0x10>
    11a4:	4f 5f       	subi	r20, 0xFF	; 255
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	48 17       	cp	r20, r24
    11aa:	59 07       	cpc	r21, r25
    11ac:	19 f0       	breq	.+6      	; 0x11b4 <delay_ms+0x2c>
    11ae:	27 2f       	mov	r18, r23
    11b0:	36 2f       	mov	r19, r22
    11b2:	f2 cf       	rjmp	.-28     	; 0x1198 <delay_ms+0x10>
    11b4:	08 95       	ret

000011b6 <LCD_WriteCommand>:
    11b6:	5e 98       	cbi	0x0b, 6	; 11
    11b8:	88 b9       	out	0x08, r24	; 8
    11ba:	5f 9a       	sbi	0x0b, 7	; 11
    11bc:	00 00       	nop
    11be:	5f 98       	cbi	0x0b, 7	; 11
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	e1 cf       	rjmp	.-62     	; 0x1188 <delay_ms>
    11c6:	08 95       	ret

000011c8 <LCD_ClearScreen>:
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	f5 cf       	rjmp	.-22     	; 0x11b6 <LCD_WriteCommand>
    11cc:	08 95       	ret

000011ce <LCD_Cursor>:
    11ce:	81 31       	cpi	r24, 0x11	; 17
    11d0:	18 f4       	brcc	.+6      	; 0x11d8 <LCD_Cursor+0xa>
    11d2:	81 58       	subi	r24, 0x81	; 129
    11d4:	f0 cf       	rjmp	.-32     	; 0x11b6 <LCD_WriteCommand>
    11d6:	08 95       	ret
    11d8:	81 55       	subi	r24, 0x51	; 81
    11da:	ed cf       	rjmp	.-38     	; 0x11b6 <LCD_WriteCommand>
    11dc:	08 95       	ret

000011de <LCD_WriteData>:
    11de:	5e 9a       	sbi	0x0b, 6	; 11
    11e0:	88 b9       	out	0x08, r24	; 8
    11e2:	5f 9a       	sbi	0x0b, 7	; 11
    11e4:	00 00       	nop
    11e6:	5f 98       	cbi	0x0b, 7	; 11
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	cd cf       	rjmp	.-102    	; 0x1188 <delay_ms>
    11ee:	08 95       	ret

000011f0 <LCD_Special>:
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	06 2f       	mov	r16, r22
    11fa:	17 2f       	mov	r17, r23
    11fc:	88 30       	cpi	r24, 0x08	; 8
    11fe:	68 f4       	brcc	.+26     	; 0x121a <LCD_Special+0x2a>
    1200:	88 0f       	add	r24, r24
    1202:	88 0f       	add	r24, r24
    1204:	88 0f       	add	r24, r24
    1206:	80 5c       	subi	r24, 0xC0	; 192
    1208:	d6 df       	rcall	.-84     	; 0x11b6 <LCD_WriteCommand>
    120a:	c0 2f       	mov	r28, r16
    120c:	d1 2f       	mov	r29, r17
    120e:	18 e0       	ldi	r17, 0x08	; 8
    1210:	89 91       	ld	r24, Y+
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	e4 df       	rcall	.-56     	; 0x11de <LCD_WriteData>
    1216:	11 50       	subi	r17, 0x01	; 1
    1218:	d9 f7       	brne	.-10     	; 0x1210 <LCD_Special+0x20>
    121a:	80 e8       	ldi	r24, 0x80	; 128
    121c:	cc df       	rcall	.-104    	; 0x11b6 <LCD_WriteCommand>
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	08 95       	ret

00001228 <LCD_DisplayString>:
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	18 2f       	mov	r17, r24
    1232:	eb 01       	movw	r28, r22
    1234:	c9 df       	rcall	.-110    	; 0x11c8 <LCD_ClearScreen>
    1236:	88 81       	ld	r24, Y
    1238:	88 23       	and	r24, r24
    123a:	59 f0       	breq	.+22     	; 0x1252 <LCD_DisplayString+0x2a>
    123c:	01 e0       	ldi	r16, 0x01	; 1
    123e:	01 0f       	add	r16, r17
    1240:	81 2f       	mov	r24, r17
    1242:	c5 df       	rcall	.-118    	; 0x11ce <LCD_Cursor>
    1244:	89 91       	ld	r24, Y+
    1246:	cb df       	rcall	.-106    	; 0x11de <LCD_WriteData>
    1248:	88 81       	ld	r24, Y
    124a:	88 23       	and	r24, r24
    124c:	11 f0       	breq	.+4      	; 0x1252 <LCD_DisplayString+0x2a>
    124e:	10 2f       	mov	r17, r16
    1250:	f5 cf       	rjmp	.-22     	; 0x123c <LCD_DisplayString+0x14>
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	08 95       	ret

0000125c <LCD_init>:
    125c:	84 e6       	ldi	r24, 0x64	; 100
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	93 df       	rcall	.-218    	; 0x1188 <delay_ms>
    1262:	88 e3       	ldi	r24, 0x38	; 56
    1264:	a8 df       	rcall	.-176    	; 0x11b6 <LCD_WriteCommand>
    1266:	86 e0       	ldi	r24, 0x06	; 6
    1268:	a6 df       	rcall	.-180    	; 0x11b6 <LCD_WriteCommand>
    126a:	8f e0       	ldi	r24, 0x0F	; 15
    126c:	a4 df       	rcall	.-184    	; 0x11b6 <LCD_WriteCommand>
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	a2 df       	rcall	.-188    	; 0x11b6 <LCD_WriteCommand>
    1272:	8a e0       	ldi	r24, 0x0A	; 10
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 df       	rcall	.-240    	; 0x1188 <delay_ms>
    1278:	64 e3       	ldi	r22, 0x34	; 52
    127a:	73 e0       	ldi	r23, 0x03	; 3
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	b8 cf       	rjmp	.-144    	; 0x11f0 <LCD_Special>
    1280:	08 95       	ret

00001282 <__cmpsf2>:
    1282:	9c d0       	rcall	.+312    	; 0x13bc <__fp_cmp>
    1284:	08 f4       	brcc	.+2      	; 0x1288 <__cmpsf2+0x6>
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	08 95       	ret

0000128a <__divsf3>:
    128a:	0c d0       	rcall	.+24     	; 0x12a4 <__divsf3x>
    128c:	d2 c0       	rjmp	.+420    	; 0x1432 <__fp_round>
    128e:	ca d0       	rcall	.+404    	; 0x1424 <__fp_pscB>
    1290:	40 f0       	brcs	.+16     	; 0x12a2 <__divsf3+0x18>
    1292:	c1 d0       	rcall	.+386    	; 0x1416 <__fp_pscA>
    1294:	30 f0       	brcs	.+12     	; 0x12a2 <__divsf3+0x18>
    1296:	21 f4       	brne	.+8      	; 0x12a0 <__divsf3+0x16>
    1298:	5f 3f       	cpi	r21, 0xFF	; 255
    129a:	19 f0       	breq	.+6      	; 0x12a2 <__divsf3+0x18>
    129c:	b3 c0       	rjmp	.+358    	; 0x1404 <__fp_inf>
    129e:	51 11       	cpse	r21, r1
    12a0:	fc c0       	rjmp	.+504    	; 0x149a <__fp_szero>
    12a2:	b6 c0       	rjmp	.+364    	; 0x1410 <__fp_nan>

000012a4 <__divsf3x>:
    12a4:	d7 d0       	rcall	.+430    	; 0x1454 <__fp_split3>
    12a6:	98 f3       	brcs	.-26     	; 0x128e <__divsf3+0x4>

000012a8 <__divsf3_pse>:
    12a8:	99 23       	and	r25, r25
    12aa:	c9 f3       	breq	.-14     	; 0x129e <__divsf3+0x14>
    12ac:	55 23       	and	r21, r21
    12ae:	b1 f3       	breq	.-20     	; 0x129c <__divsf3+0x12>
    12b0:	95 1b       	sub	r25, r21
    12b2:	55 0b       	sbc	r21, r21
    12b4:	bb 27       	eor	r27, r27
    12b6:	aa 27       	eor	r26, r26
    12b8:	62 17       	cp	r22, r18
    12ba:	73 07       	cpc	r23, r19
    12bc:	84 07       	cpc	r24, r20
    12be:	38 f0       	brcs	.+14     	; 0x12ce <__divsf3_pse+0x26>
    12c0:	9f 5f       	subi	r25, 0xFF	; 255
    12c2:	5f 4f       	sbci	r21, 0xFF	; 255
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	44 1f       	adc	r20, r20
    12ca:	aa 1f       	adc	r26, r26
    12cc:	a9 f3       	breq	.-22     	; 0x12b8 <__divsf3_pse+0x10>
    12ce:	33 d0       	rcall	.+102    	; 0x1336 <__divsf3_pse+0x8e>
    12d0:	0e 2e       	mov	r0, r30
    12d2:	3a f0       	brmi	.+14     	; 0x12e2 <__divsf3_pse+0x3a>
    12d4:	e0 e8       	ldi	r30, 0x80	; 128
    12d6:	30 d0       	rcall	.+96     	; 0x1338 <__divsf3_pse+0x90>
    12d8:	91 50       	subi	r25, 0x01	; 1
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	e6 95       	lsr	r30
    12de:	00 1c       	adc	r0, r0
    12e0:	ca f7       	brpl	.-14     	; 0x12d4 <__divsf3_pse+0x2c>
    12e2:	29 d0       	rcall	.+82     	; 0x1336 <__divsf3_pse+0x8e>
    12e4:	fe 2f       	mov	r31, r30
    12e6:	27 d0       	rcall	.+78     	; 0x1336 <__divsf3_pse+0x8e>
    12e8:	66 0f       	add	r22, r22
    12ea:	77 1f       	adc	r23, r23
    12ec:	88 1f       	adc	r24, r24
    12ee:	bb 1f       	adc	r27, r27
    12f0:	26 17       	cp	r18, r22
    12f2:	37 07       	cpc	r19, r23
    12f4:	48 07       	cpc	r20, r24
    12f6:	ab 07       	cpc	r26, r27
    12f8:	b0 e8       	ldi	r27, 0x80	; 128
    12fa:	09 f0       	breq	.+2      	; 0x12fe <__divsf3_pse+0x56>
    12fc:	bb 0b       	sbc	r27, r27
    12fe:	80 2d       	mov	r24, r0
    1300:	bf 01       	movw	r22, r30
    1302:	ff 27       	eor	r31, r31
    1304:	93 58       	subi	r25, 0x83	; 131
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	2a f0       	brmi	.+10     	; 0x1314 <__divsf3_pse+0x6c>
    130a:	9e 3f       	cpi	r25, 0xFE	; 254
    130c:	51 05       	cpc	r21, r1
    130e:	68 f0       	brcs	.+26     	; 0x132a <__divsf3_pse+0x82>
    1310:	79 c0       	rjmp	.+242    	; 0x1404 <__fp_inf>
    1312:	c3 c0       	rjmp	.+390    	; 0x149a <__fp_szero>
    1314:	5f 3f       	cpi	r21, 0xFF	; 255
    1316:	ec f3       	brlt	.-6      	; 0x1312 <__divsf3_pse+0x6a>
    1318:	98 3e       	cpi	r25, 0xE8	; 232
    131a:	dc f3       	brlt	.-10     	; 0x1312 <__divsf3_pse+0x6a>
    131c:	86 95       	lsr	r24
    131e:	77 95       	ror	r23
    1320:	67 95       	ror	r22
    1322:	b7 95       	ror	r27
    1324:	f7 95       	ror	r31
    1326:	9f 5f       	subi	r25, 0xFF	; 255
    1328:	c9 f7       	brne	.-14     	; 0x131c <__divsf3_pse+0x74>
    132a:	88 0f       	add	r24, r24
    132c:	91 1d       	adc	r25, r1
    132e:	96 95       	lsr	r25
    1330:	87 95       	ror	r24
    1332:	97 f9       	bld	r25, 7
    1334:	08 95       	ret
    1336:	e1 e0       	ldi	r30, 0x01	; 1
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	bb 1f       	adc	r27, r27
    1340:	62 17       	cp	r22, r18
    1342:	73 07       	cpc	r23, r19
    1344:	84 07       	cpc	r24, r20
    1346:	ba 07       	cpc	r27, r26
    1348:	20 f0       	brcs	.+8      	; 0x1352 <__divsf3_pse+0xaa>
    134a:	62 1b       	sub	r22, r18
    134c:	73 0b       	sbc	r23, r19
    134e:	84 0b       	sbc	r24, r20
    1350:	ba 0b       	sbc	r27, r26
    1352:	ee 1f       	adc	r30, r30
    1354:	88 f7       	brcc	.-30     	; 0x1338 <__divsf3_pse+0x90>
    1356:	e0 95       	com	r30
    1358:	08 95       	ret

0000135a <__fixsfsi>:
    135a:	04 d0       	rcall	.+8      	; 0x1364 <__fixunssfsi>
    135c:	68 94       	set
    135e:	b1 11       	cpse	r27, r1
    1360:	9c c0       	rjmp	.+312    	; 0x149a <__fp_szero>
    1362:	08 95       	ret

00001364 <__fixunssfsi>:
    1364:	7f d0       	rcall	.+254    	; 0x1464 <__fp_splitA>
    1366:	88 f0       	brcs	.+34     	; 0x138a <__fixunssfsi+0x26>
    1368:	9f 57       	subi	r25, 0x7F	; 127
    136a:	90 f0       	brcs	.+36     	; 0x1390 <__fixunssfsi+0x2c>
    136c:	b9 2f       	mov	r27, r25
    136e:	99 27       	eor	r25, r25
    1370:	b7 51       	subi	r27, 0x17	; 23
    1372:	a0 f0       	brcs	.+40     	; 0x139c <__fixunssfsi+0x38>
    1374:	d1 f0       	breq	.+52     	; 0x13aa <__fixunssfsi+0x46>
    1376:	66 0f       	add	r22, r22
    1378:	77 1f       	adc	r23, r23
    137a:	88 1f       	adc	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	1a f0       	brmi	.+6      	; 0x1386 <__fixunssfsi+0x22>
    1380:	ba 95       	dec	r27
    1382:	c9 f7       	brne	.-14     	; 0x1376 <__fixunssfsi+0x12>
    1384:	12 c0       	rjmp	.+36     	; 0x13aa <__fixunssfsi+0x46>
    1386:	b1 30       	cpi	r27, 0x01	; 1
    1388:	81 f0       	breq	.+32     	; 0x13aa <__fixunssfsi+0x46>
    138a:	86 d0       	rcall	.+268    	; 0x1498 <__fp_zero>
    138c:	b1 e0       	ldi	r27, 0x01	; 1
    138e:	08 95       	ret
    1390:	83 c0       	rjmp	.+262    	; 0x1498 <__fp_zero>
    1392:	67 2f       	mov	r22, r23
    1394:	78 2f       	mov	r23, r24
    1396:	88 27       	eor	r24, r24
    1398:	b8 5f       	subi	r27, 0xF8	; 248
    139a:	39 f0       	breq	.+14     	; 0x13aa <__fixunssfsi+0x46>
    139c:	b9 3f       	cpi	r27, 0xF9	; 249
    139e:	cc f3       	brlt	.-14     	; 0x1392 <__fixunssfsi+0x2e>
    13a0:	86 95       	lsr	r24
    13a2:	77 95       	ror	r23
    13a4:	67 95       	ror	r22
    13a6:	b3 95       	inc	r27
    13a8:	d9 f7       	brne	.-10     	; 0x13a0 <__fixunssfsi+0x3c>
    13aa:	3e f4       	brtc	.+14     	; 0x13ba <__fixunssfsi+0x56>
    13ac:	90 95       	com	r25
    13ae:	80 95       	com	r24
    13b0:	70 95       	com	r23
    13b2:	61 95       	neg	r22
    13b4:	7f 4f       	sbci	r23, 0xFF	; 255
    13b6:	8f 4f       	sbci	r24, 0xFF	; 255
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	08 95       	ret

000013bc <__fp_cmp>:
    13bc:	99 0f       	add	r25, r25
    13be:	00 08       	sbc	r0, r0
    13c0:	55 0f       	add	r21, r21
    13c2:	aa 0b       	sbc	r26, r26
    13c4:	e0 e8       	ldi	r30, 0x80	; 128
    13c6:	fe ef       	ldi	r31, 0xFE	; 254
    13c8:	16 16       	cp	r1, r22
    13ca:	17 06       	cpc	r1, r23
    13cc:	e8 07       	cpc	r30, r24
    13ce:	f9 07       	cpc	r31, r25
    13d0:	c0 f0       	brcs	.+48     	; 0x1402 <__fp_cmp+0x46>
    13d2:	12 16       	cp	r1, r18
    13d4:	13 06       	cpc	r1, r19
    13d6:	e4 07       	cpc	r30, r20
    13d8:	f5 07       	cpc	r31, r21
    13da:	98 f0       	brcs	.+38     	; 0x1402 <__fp_cmp+0x46>
    13dc:	62 1b       	sub	r22, r18
    13de:	73 0b       	sbc	r23, r19
    13e0:	84 0b       	sbc	r24, r20
    13e2:	95 0b       	sbc	r25, r21
    13e4:	39 f4       	brne	.+14     	; 0x13f4 <__fp_cmp+0x38>
    13e6:	0a 26       	eor	r0, r26
    13e8:	61 f0       	breq	.+24     	; 0x1402 <__fp_cmp+0x46>
    13ea:	23 2b       	or	r18, r19
    13ec:	24 2b       	or	r18, r20
    13ee:	25 2b       	or	r18, r21
    13f0:	21 f4       	brne	.+8      	; 0x13fa <__fp_cmp+0x3e>
    13f2:	08 95       	ret
    13f4:	0a 26       	eor	r0, r26
    13f6:	09 f4       	brne	.+2      	; 0x13fa <__fp_cmp+0x3e>
    13f8:	a1 40       	sbci	r26, 0x01	; 1
    13fa:	a6 95       	lsr	r26
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	81 1d       	adc	r24, r1
    1400:	81 1d       	adc	r24, r1
    1402:	08 95       	ret

00001404 <__fp_inf>:
    1404:	97 f9       	bld	r25, 7
    1406:	9f 67       	ori	r25, 0x7F	; 127
    1408:	80 e8       	ldi	r24, 0x80	; 128
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	08 95       	ret

00001410 <__fp_nan>:
    1410:	9f ef       	ldi	r25, 0xFF	; 255
    1412:	80 ec       	ldi	r24, 0xC0	; 192
    1414:	08 95       	ret

00001416 <__fp_pscA>:
    1416:	00 24       	eor	r0, r0
    1418:	0a 94       	dec	r0
    141a:	16 16       	cp	r1, r22
    141c:	17 06       	cpc	r1, r23
    141e:	18 06       	cpc	r1, r24
    1420:	09 06       	cpc	r0, r25
    1422:	08 95       	ret

00001424 <__fp_pscB>:
    1424:	00 24       	eor	r0, r0
    1426:	0a 94       	dec	r0
    1428:	12 16       	cp	r1, r18
    142a:	13 06       	cpc	r1, r19
    142c:	14 06       	cpc	r1, r20
    142e:	05 06       	cpc	r0, r21
    1430:	08 95       	ret

00001432 <__fp_round>:
    1432:	09 2e       	mov	r0, r25
    1434:	03 94       	inc	r0
    1436:	00 0c       	add	r0, r0
    1438:	11 f4       	brne	.+4      	; 0x143e <__fp_round+0xc>
    143a:	88 23       	and	r24, r24
    143c:	52 f0       	brmi	.+20     	; 0x1452 <__fp_round+0x20>
    143e:	bb 0f       	add	r27, r27
    1440:	40 f4       	brcc	.+16     	; 0x1452 <__fp_round+0x20>
    1442:	bf 2b       	or	r27, r31
    1444:	11 f4       	brne	.+4      	; 0x144a <__fp_round+0x18>
    1446:	60 ff       	sbrs	r22, 0
    1448:	04 c0       	rjmp	.+8      	; 0x1452 <__fp_round+0x20>
    144a:	6f 5f       	subi	r22, 0xFF	; 255
    144c:	7f 4f       	sbci	r23, 0xFF	; 255
    144e:	8f 4f       	sbci	r24, 0xFF	; 255
    1450:	9f 4f       	sbci	r25, 0xFF	; 255
    1452:	08 95       	ret

00001454 <__fp_split3>:
    1454:	57 fd       	sbrc	r21, 7
    1456:	90 58       	subi	r25, 0x80	; 128
    1458:	44 0f       	add	r20, r20
    145a:	55 1f       	adc	r21, r21
    145c:	59 f0       	breq	.+22     	; 0x1474 <__fp_splitA+0x10>
    145e:	5f 3f       	cpi	r21, 0xFF	; 255
    1460:	71 f0       	breq	.+28     	; 0x147e <__fp_splitA+0x1a>
    1462:	47 95       	ror	r20

00001464 <__fp_splitA>:
    1464:	88 0f       	add	r24, r24
    1466:	97 fb       	bst	r25, 7
    1468:	99 1f       	adc	r25, r25
    146a:	61 f0       	breq	.+24     	; 0x1484 <__fp_splitA+0x20>
    146c:	9f 3f       	cpi	r25, 0xFF	; 255
    146e:	79 f0       	breq	.+30     	; 0x148e <__fp_splitA+0x2a>
    1470:	87 95       	ror	r24
    1472:	08 95       	ret
    1474:	12 16       	cp	r1, r18
    1476:	13 06       	cpc	r1, r19
    1478:	14 06       	cpc	r1, r20
    147a:	55 1f       	adc	r21, r21
    147c:	f2 cf       	rjmp	.-28     	; 0x1462 <__fp_split3+0xe>
    147e:	46 95       	lsr	r20
    1480:	f1 df       	rcall	.-30     	; 0x1464 <__fp_splitA>
    1482:	08 c0       	rjmp	.+16     	; 0x1494 <__fp_splitA+0x30>
    1484:	16 16       	cp	r1, r22
    1486:	17 06       	cpc	r1, r23
    1488:	18 06       	cpc	r1, r24
    148a:	99 1f       	adc	r25, r25
    148c:	f1 cf       	rjmp	.-30     	; 0x1470 <__fp_splitA+0xc>
    148e:	86 95       	lsr	r24
    1490:	71 05       	cpc	r23, r1
    1492:	61 05       	cpc	r22, r1
    1494:	08 94       	sec
    1496:	08 95       	ret

00001498 <__fp_zero>:
    1498:	e8 94       	clt

0000149a <__fp_szero>:
    149a:	bb 27       	eor	r27, r27
    149c:	66 27       	eor	r22, r22
    149e:	77 27       	eor	r23, r23
    14a0:	cb 01       	movw	r24, r22
    14a2:	97 f9       	bld	r25, 7
    14a4:	08 95       	ret

000014a6 <__gesf2>:
    14a6:	8a df       	rcall	.-236    	; 0x13bc <__fp_cmp>
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <__gesf2+0x6>
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	08 95       	ret

000014ae <__mulsf3>:
    14ae:	0b d0       	rcall	.+22     	; 0x14c6 <__mulsf3x>
    14b0:	c0 cf       	rjmp	.-128    	; 0x1432 <__fp_round>
    14b2:	b1 df       	rcall	.-158    	; 0x1416 <__fp_pscA>
    14b4:	28 f0       	brcs	.+10     	; 0x14c0 <__mulsf3+0x12>
    14b6:	b6 df       	rcall	.-148    	; 0x1424 <__fp_pscB>
    14b8:	18 f0       	brcs	.+6      	; 0x14c0 <__mulsf3+0x12>
    14ba:	95 23       	and	r25, r21
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <__mulsf3+0x12>
    14be:	a2 cf       	rjmp	.-188    	; 0x1404 <__fp_inf>
    14c0:	a7 cf       	rjmp	.-178    	; 0x1410 <__fp_nan>
    14c2:	11 24       	eor	r1, r1
    14c4:	ea cf       	rjmp	.-44     	; 0x149a <__fp_szero>

000014c6 <__mulsf3x>:
    14c6:	c6 df       	rcall	.-116    	; 0x1454 <__fp_split3>
    14c8:	a0 f3       	brcs	.-24     	; 0x14b2 <__mulsf3+0x4>

000014ca <__mulsf3_pse>:
    14ca:	95 9f       	mul	r25, r21
    14cc:	d1 f3       	breq	.-12     	; 0x14c2 <__mulsf3+0x14>
    14ce:	95 0f       	add	r25, r21
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	55 1f       	adc	r21, r21
    14d4:	62 9f       	mul	r22, r18
    14d6:	f0 01       	movw	r30, r0
    14d8:	72 9f       	mul	r23, r18
    14da:	bb 27       	eor	r27, r27
    14dc:	f0 0d       	add	r31, r0
    14de:	b1 1d       	adc	r27, r1
    14e0:	63 9f       	mul	r22, r19
    14e2:	aa 27       	eor	r26, r26
    14e4:	f0 0d       	add	r31, r0
    14e6:	b1 1d       	adc	r27, r1
    14e8:	aa 1f       	adc	r26, r26
    14ea:	64 9f       	mul	r22, r20
    14ec:	66 27       	eor	r22, r22
    14ee:	b0 0d       	add	r27, r0
    14f0:	a1 1d       	adc	r26, r1
    14f2:	66 1f       	adc	r22, r22
    14f4:	82 9f       	mul	r24, r18
    14f6:	22 27       	eor	r18, r18
    14f8:	b0 0d       	add	r27, r0
    14fa:	a1 1d       	adc	r26, r1
    14fc:	62 1f       	adc	r22, r18
    14fe:	73 9f       	mul	r23, r19
    1500:	b0 0d       	add	r27, r0
    1502:	a1 1d       	adc	r26, r1
    1504:	62 1f       	adc	r22, r18
    1506:	83 9f       	mul	r24, r19
    1508:	a0 0d       	add	r26, r0
    150a:	61 1d       	adc	r22, r1
    150c:	22 1f       	adc	r18, r18
    150e:	74 9f       	mul	r23, r20
    1510:	33 27       	eor	r19, r19
    1512:	a0 0d       	add	r26, r0
    1514:	61 1d       	adc	r22, r1
    1516:	23 1f       	adc	r18, r19
    1518:	84 9f       	mul	r24, r20
    151a:	60 0d       	add	r22, r0
    151c:	21 1d       	adc	r18, r1
    151e:	82 2f       	mov	r24, r18
    1520:	76 2f       	mov	r23, r22
    1522:	6a 2f       	mov	r22, r26
    1524:	11 24       	eor	r1, r1
    1526:	9f 57       	subi	r25, 0x7F	; 127
    1528:	50 40       	sbci	r21, 0x00	; 0
    152a:	8a f0       	brmi	.+34     	; 0x154e <__mulsf3_pse+0x84>
    152c:	e1 f0       	breq	.+56     	; 0x1566 <__mulsf3_pse+0x9c>
    152e:	88 23       	and	r24, r24
    1530:	4a f0       	brmi	.+18     	; 0x1544 <__mulsf3_pse+0x7a>
    1532:	ee 0f       	add	r30, r30
    1534:	ff 1f       	adc	r31, r31
    1536:	bb 1f       	adc	r27, r27
    1538:	66 1f       	adc	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	88 1f       	adc	r24, r24
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	50 40       	sbci	r21, 0x00	; 0
    1542:	a9 f7       	brne	.-22     	; 0x152e <__mulsf3_pse+0x64>
    1544:	9e 3f       	cpi	r25, 0xFE	; 254
    1546:	51 05       	cpc	r21, r1
    1548:	70 f0       	brcs	.+28     	; 0x1566 <__mulsf3_pse+0x9c>
    154a:	5c cf       	rjmp	.-328    	; 0x1404 <__fp_inf>
    154c:	a6 cf       	rjmp	.-180    	; 0x149a <__fp_szero>
    154e:	5f 3f       	cpi	r21, 0xFF	; 255
    1550:	ec f3       	brlt	.-6      	; 0x154c <__mulsf3_pse+0x82>
    1552:	98 3e       	cpi	r25, 0xE8	; 232
    1554:	dc f3       	brlt	.-10     	; 0x154c <__mulsf3_pse+0x82>
    1556:	86 95       	lsr	r24
    1558:	77 95       	ror	r23
    155a:	67 95       	ror	r22
    155c:	b7 95       	ror	r27
    155e:	f7 95       	ror	r31
    1560:	e7 95       	ror	r30
    1562:	9f 5f       	subi	r25, 0xFF	; 255
    1564:	c1 f7       	brne	.-16     	; 0x1556 <__mulsf3_pse+0x8c>
    1566:	fe 2b       	or	r31, r30
    1568:	88 0f       	add	r24, r24
    156a:	91 1d       	adc	r25, r1
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	97 f9       	bld	r25, 7
    1572:	08 95       	ret

00001574 <__umulhisi3>:
    1574:	a2 9f       	mul	r26, r18
    1576:	b0 01       	movw	r22, r0
    1578:	b3 9f       	mul	r27, r19
    157a:	c0 01       	movw	r24, r0
    157c:	a3 9f       	mul	r26, r19
    157e:	70 0d       	add	r23, r0
    1580:	81 1d       	adc	r24, r1
    1582:	11 24       	eor	r1, r1
    1584:	91 1d       	adc	r25, r1
    1586:	b2 9f       	mul	r27, r18
    1588:	70 0d       	add	r23, r0
    158a:	81 1d       	adc	r24, r1
    158c:	11 24       	eor	r1, r1
    158e:	91 1d       	adc	r25, r1
    1590:	08 95       	ret

00001592 <__eerd_word_m1284>:
    1592:	a8 e1       	ldi	r26, 0x18	; 24
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	42 e0       	ldi	r20, 0x02	; 2
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <__eerd_blraw_m1284>

0000159c <__eeupd_word_m1284>:
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	27 2f       	mov	r18, r23
    15a0:	12 d0       	rcall	.+36     	; 0x15c6 <__eeupd_r18_m1284>
    15a2:	10 c0       	rjmp	.+32     	; 0x15c4 <__eeupd_byte_m1284>

000015a4 <__eerd_block_m1284>:
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22

000015a8 <__eerd_blraw_m1284>:
    15a8:	fc 01       	movw	r30, r24
    15aa:	f9 99       	sbic	0x1f, 1	; 31
    15ac:	fe cf       	rjmp	.-4      	; 0x15aa <__eerd_blraw_m1284+0x2>
    15ae:	06 c0       	rjmp	.+12     	; 0x15bc <__eerd_blraw_m1284+0x14>
    15b0:	f2 bd       	out	0x22, r31	; 34
    15b2:	e1 bd       	out	0x21, r30	; 33
    15b4:	f8 9a       	sbi	0x1f, 0	; 31
    15b6:	31 96       	adiw	r30, 0x01	; 1
    15b8:	00 b4       	in	r0, 0x20	; 32
    15ba:	0d 92       	st	X+, r0
    15bc:	41 50       	subi	r20, 0x01	; 1
    15be:	50 40       	sbci	r21, 0x00	; 0
    15c0:	b8 f7       	brcc	.-18     	; 0x15b0 <__eerd_blraw_m1284+0x8>
    15c2:	08 95       	ret

000015c4 <__eeupd_byte_m1284>:
    15c4:	26 2f       	mov	r18, r22

000015c6 <__eeupd_r18_m1284>:
    15c6:	f9 99       	sbic	0x1f, 1	; 31
    15c8:	fe cf       	rjmp	.-4      	; 0x15c6 <__eeupd_r18_m1284>
    15ca:	92 bd       	out	0x22, r25	; 34
    15cc:	81 bd       	out	0x21, r24	; 33
    15ce:	f8 9a       	sbi	0x1f, 0	; 31
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	00 b4       	in	r0, 0x20	; 32
    15d4:	02 16       	cp	r0, r18
    15d6:	39 f0       	breq	.+14     	; 0x15e6 <__eeupd_r18_m1284+0x20>
    15d8:	1f ba       	out	0x1f, r1	; 31
    15da:	20 bd       	out	0x20, r18	; 32
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	fa 9a       	sbi	0x1f, 2	; 31
    15e2:	f9 9a       	sbi	0x1f, 1	; 31
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	08 95       	ret

000015e8 <_exit>:
    15e8:	f8 94       	cli

000015ea <__stop_program>:
    15ea:	ff cf       	rjmp	.-2      	; 0x15ea <__stop_program>
